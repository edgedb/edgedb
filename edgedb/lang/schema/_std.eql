#
# This source file is part of the EdgeDB open source project.
#
# Copyright 2016-present MagicStack Inc. and the EdgeDB authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


CREATE MODULE std;
CREATE MODULE stdattrs;  # standard schema attributes need to be in a separate
                         # module to avoid name conflicts.

CREATE ABSTRACT SCALAR TYPE std::any;

CREATE SCALAR TYPE std::bytes;

CREATE SCALAR TYPE std::datetime;

CREATE SCALAR TYPE std::uuid;

CREATE SCALAR TYPE std::str;

CREATE SCALAR TYPE std::json;

CREATE SCALAR TYPE std::timedelta;

CREATE SCALAR TYPE std::date;

CREATE SCALAR TYPE std::time;

CREATE ABSTRACT SCALAR TYPE std::anyreal;

CREATE ABSTRACT SCALAR TYPE std::anyint EXTENDING std::anyreal;

CREATE SCALAR TYPE std::int16 EXTENDING std::anyint;

CREATE SCALAR TYPE std::int32 EXTENDING std::anyint;

CREATE SCALAR TYPE std::int64 EXTENDING std::anyint;

CREATE ABSTRACT SCALAR TYPE std::anyfloat EXTENDING std::anyreal;

CREATE SCALAR TYPE std::float32 EXTENDING std::anyfloat;

CREATE SCALAR TYPE std::float64 EXTENDING std::anyfloat;

CREATE SCALAR TYPE std::decimal EXTENDING std::anyreal;

CREATE SCALAR TYPE std::bool;

CREATE ABSTRACT ATTRIBUTE std::pattern std::str;

CREATE ABSTRACT SCALAR TYPE std::sequence EXTENDING std::int64;

CREATE ABSTRACT ATTRIBUTE stdattrs::precision array<std::int16>;

CREATE ABSTRACT ATTRIBUTE stdattrs::name std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::is_abstract std::bool;
CREATE ABSTRACT ATTRIBUTE stdattrs::is_final std::bool;
CREATE ABSTRACT ATTRIBUTE stdattrs::is_derived std::bool;
CREATE ABSTRACT ATTRIBUTE stdattrs::is_virtual std::bool;
CREATE ABSTRACT ATTRIBUTE stdattrs::view_type std::int64;
CREATE ABSTRACT ATTRIBUTE stdattrs::title std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::description std::str;

CREATE ABSTRACT ATTRIBUTE stdattrs::expr std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::subjectexpr std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::finalexpr std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::errmessage std::str;

CREATE ABSTRACT ATTRIBUTE stdattrs::value std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::required std::bool;
CREATE ABSTRACT ATTRIBUTE stdattrs::readonly std::bool;
CREATE ABSTRACT ATTRIBUTE stdattrs::computable std::bool;
CREATE ABSTRACT ATTRIBUTE stdattrs::default std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::expression std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::cardinality std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::aggregate std::bool;
CREATE ABSTRACT ATTRIBUTE stdattrs::set_returning std::bool;
CREATE ABSTRACT ATTRIBUTE stdattrs::language std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::code std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::from_function std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::initial_value std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::varparam std::int64;
CREATE ABSTRACT ATTRIBUTE stdattrs::args map<std::str, std::str>;

CREATE FUNCTION std::lower(std::str) -> std::str
    FROM SQL FUNCTION 'lower';

CREATE FUNCTION std::sum(SET OF std::int64) -> std::int64 {
    INITIAL VALUE 0;
    FROM SQL FUNCTION 'sum';
};

CREATE FUNCTION std::sum(SET OF std::float64) -> std::float64 {
    INITIAL VALUE 0;
    FROM SQL FUNCTION 'sum';
};

CREATE FUNCTION std::count(SET OF std::any) -> std::int64 {
    INITIAL VALUE 0;
    FROM SQL FUNCTION 'count';
};

CREATE FUNCTION std::array_agg(SET OF std::any) -> array<std::any> {
    INITIAL VALUE [];
    FROM SQL FUNCTION 'array_agg';
};

CREATE FUNCTION std::is_distinct(SET OF std::any) -> std::bool {
    INITIAL VALUE True;
    FROM SQL FUNCTION '--system--';
};

CREATE FUNCTION std::array_unpack(array<std::any>) -> SET OF std::any
    FROM SQL FUNCTION '--system--';

CREATE FUNCTION std::array_contains(array<std::any>, std::any) -> std::bool
    FROM SQL $$
        SELECT
            CASE
                WHEN $2 IS NULL THEN NULL
                ELSE array_position($1, $2) IS NOT NULL
            END;
    $$;

CREATE FUNCTION std::array_enumerate(array<std::any>) ->
        SET OF tuple<std::any, std::int64>
    FROM SQL FUNCTION '--system--';

CREATE FUNCTION std::len(std::str) -> std::int64
    FROM SQL FUNCTION 'char_length';

CREATE FUNCTION std::len(std::bytes) -> std::int64
    FROM SQL FUNCTION 'length';

CREATE FUNCTION std::len(array<std::any>) -> std::int64
    FROM SQL $$
        SELECT array_length($1, 1)::bigint
    $$;

CREATE FUNCTION std::random() -> std::float64
    FROM SQL FUNCTION 'random';

CREATE FUNCTION std::re_match(std::str, std::str) -> array<std::str>
    FROM SQL $$
        SELECT regexp_matches($1, $2);
    $$;

CREATE FUNCTION std::re_match_all(std::str, std::str) -> SET OF array<std::str>
    FROM SQL $$
        SELECT regexp_matches($1, $2, 'g');
    $$;

CREATE FUNCTION std::re_test(std::str, std::str) -> std::bool
    FROM SQL $$
        SELECT $1 ~ $2;
    $$;

CREATE FUNCTION std::current_date() -> std::date
    FROM SQL 'SELECT current_date';

CREATE FUNCTION std::current_time() -> std::time
    FROM SQL 'SELECT current_time';

CREATE FUNCTION std::current_datetime() -> std::datetime
    FROM SQL FUNCTION 'now';

CREATE FUNCTION std::uuid_generate_v1mc() -> std::uuid
    FROM SQL 'SELECT edgedb.uuid_generate_v1mc()';

CREATE ABSTRACT CONSTRAINT std::constraint
{
    SET errmessage := 'invalid {__subject__}';
};

CREATE ABSTRACT CONSTRAINT std::expression
        EXTENDING std::constraint
{
    SET expr := __subject__;
};

CREATE ABSTRACT CONSTRAINT std::max(std::any)
        EXTENDING std::constraint
{
    SET errmessage := 'Maximum allowed value for {__subject__} is {$0}.';
    SET expr := __subject__ <= $0;
};

CREATE ABSTRACT CONSTRAINT std::enum(VARIADIC std::any)
        EXTENDING std::constraint
{
    SET errmessage := '{__subject__} must be one of: {$0}.';
    SET expr := array_contains($0, __subject__);
};

CREATE ABSTRACT CONSTRAINT std::min(std::any)
        EXTENDING std::constraint
{
    SET errmessage := 'Minimum allowed value for {__subject__} is {$0}.';
    SET expr := __subject__ >= $0;
};

CREATE ABSTRACT CONSTRAINT std::minexclusive(std::any)
        EXTENDING std::min
{
    SET errmessage := '{__subject__} must be greater than {$0}.';
    SET expr := __subject__ > $0;
};

CREATE ABSTRACT CONSTRAINT std::length ON (len(<std::str>__subject__))
        EXTENDING std::constraint
{
    SET errmessage := 'invalid {__subject__}';
};

CREATE ABSTRACT CONSTRAINT std::minlength(std::int64)
        EXTENDING (std::min, std::length)
{
    SET errmessage := '{__subject__} must be no shorter than {$0} characters.';
};

CREATE ABSTRACT CONSTRAINT std::regexp(std::any)
        EXTENDING std::constraint
{
    SET errmessage := 'invalid {__subject__}';
    SET expr := re_test(__subject__, $0);
};

CREATE ABSTRACT CONSTRAINT std::maxlength(std::int64)
        EXTENDING (std::max, std::length)
{
    SET errmessage := '{__subject__} must be no longer than {$0} characters.';
};

CREATE ABSTRACT CONSTRAINT std::maxexclusive(std::any)
        EXTENDING std::max
{
    SET errmessage := '{__subject__} must be less than {$0}.';
};

CREATE ABSTRACT CONSTRAINT std::unique
        EXTENDING std::constraint
{
    SET errmessage := '{__subject__} violates unique constraint';
    SET expr := std::is_distinct(__subject__);
};

CREATE ACTION std::restrict {
    SET title := 'Abort the event if a pointer exists';
};

CREATE ACTION std::cascade {
    SET title := 'Cascade the event through the pointer';
};

CREATE ACTION std::delete_pointer {
    SET title := 'Delete pointer';
};

CREATE ACTION std::ignore {
    SET title := 'Ignore the event';
};

CREATE ACTION std::delete_source {
    SET title := 'Delete pointer target';
};

CREATE ACTION std::delete_orphan_target {
    SET title := 'Delete target if no instances of the inbound pointer to it exist';
};

CREATE ACTION std::cascade_loaded {
    SET title := 'Cascade the event through the pointer if target is loaded to the local session';
};

CREATE ACTION std::delete_target {
    SET title := 'Delete pointer target';
};

CREATE EVENT std::event;

CREATE EVENT std::cascade_base EXTENDING std::event;

CREATE EVENT std::cascade_session_detach EXTENDING std::cascade_base;

CREATE EVENT std::cascade_serialize EXTENDING std::cascade_base;

CREATE EVENT std::internal EXTENDING std::event;

CREATE EVENT std::deleted EXTENDING std::internal;

CREATE EVENT std::source_deleted EXTENDING std::deleted;

CREATE EVENT std::self_deleted EXTENDING std::deleted;

CREATE EVENT std::cascade_session_attach EXTENDING std::cascade_base;

CREATE EVENT std::cascade_copy EXTENDING std::cascade_base;

CREATE EVENT std::target_deleted EXTENDING std::deleted;

CREATE ABSTRACT PROPERTY std::property;

CREATE ABSTRACT PROPERTY std::source;

CREATE ABSTRACT PROPERTY std::target;

CREATE ABSTRACT LINK std::link {
    CREATE POLICY FOR std::cascade_session_detach TO std::cascade_loaded;
    CREATE POLICY FOR std::cascade_serialize TO std::cascade_loaded;
    CREATE POLICY FOR std::source_deleted TO std::restrict;
    CREATE POLICY FOR std::self_deleted TO std::ignore;
    CREATE POLICY FOR std::cascade_session_attach TO std::cascade_loaded;
    CREATE POLICY FOR std::target_deleted TO std::restrict;
    CREATE POLICY FOR std::cascade_copy TO std::ignore;
};

CREATE ABSTRACT PROPERTY std::id EXTENDING std::property;

CREATE TYPE std::Object {
    CREATE REQUIRED PROPERTY std::id -> std::uuid {
        SET default := (SELECT std::uuid_generate_v1mc());
        SET cardinality := '11';
        SET readonly := True;
    };
};


# INTROSPECTION SCHEMA

CREATE MODULE schema;


# Base type for all schema entities.
CREATE ABSTRACT TYPE schema::Object {
    CREATE REQUIRED PROPERTY schema::name -> std::str;
    CREATE PROPERTY schema::description -> std::str;
};


# Base type for all *types*.
CREATE ABSTRACT TYPE schema::Type EXTENDING schema::Object;


CREATE TYPE schema::Attribute EXTENDING schema::Object {
    CREATE LINK schema::type -> schema::Type;
};


CREATE ABSTRACT LINK schema::attributes {
    CREATE PROPERTY schema::value -> std::str;
};


ALTER TYPE schema::Object {
    CREATE LINK schema::attributes -> schema::Attribute {
        SET cardinality := '**';
    };
};


CREATE ABSTRACT LINK std::__type__ {
    SET readonly := True;
};


ALTER TYPE std::Object {
    CREATE LINK std::__type__ -> schema::Type {
        SET readonly := True;
    };
};


CREATE TYPE schema::Module EXTENDING schema::Object;


CREATE ABSTRACT TYPE schema::ContainerType EXTENDING schema::Type;


CREATE TYPE schema::Array EXTENDING schema::ContainerType {
    CREATE REQUIRED LINK schema::element_type -> schema::Type;
    CREATE PROPERTY schema::dimensions -> array<std::int64>;
};


CREATE TYPE schema::Map EXTENDING schema::ContainerType {
    CREATE REQUIRED LINK schema::element_type -> schema::Type;
    CREATE REQUIRED LINK schema::key_type -> schema::Type;
};


CREATE TYPE schema::TypeElement {
    CREATE REQUIRED LINK schema::type -> schema::Type;
    CREATE REQUIRED PROPERTY schema::num -> std::int64;
    CREATE PROPERTY schema::name -> std::str;
};


CREATE TYPE schema::Tuple EXTENDING schema::ContainerType {
    CREATE REQUIRED LINK schema::element_types -> schema::TypeElement {
        SET cardinality := '1*';
    };
};


CREATE TYPE schema::Delta EXTENDING schema::Object {
    CREATE LINK schema::parents -> schema::Delta {
        SET cardinality := '**';
    };
};


CREATE ABSTRACT TYPE schema::InheritingObject EXTENDING schema::Object {
    CREATE LINK schema::bases -> schema::InheritingObject {
        SET cardinality := '**';
    };

    CREATE LINK schema::mro -> schema::InheritingObject {
        SET cardinality := '**';
    };

    CREATE PROPERTY schema::is_abstract -> std::bool {
        SET default := false;
    };

    CREATE PROPERTY schema::is_final -> std::bool {
        SET default := false;
    };
};


CREATE TYPE schema::Parameter {
    CREATE REQUIRED LINK schema::type -> schema::Type;
    CREATE REQUIRED PROPERTY schema::kind -> std::str;
    CREATE REQUIRED PROPERTY schema::num -> std::int64;
    CREATE PROPERTY schema::name -> std::str;
    CREATE PROPERTY schema::default -> std::str;
};


CREATE ABSTRACT LINK schema::params {
    CREATE PROPERTY schema::value -> std::str;
};


CREATE TYPE schema::Constraint EXTENDING schema::InheritingObject {
    CREATE PROPERTY schema::expr -> std::str;
    CREATE PROPERTY schema::subjectexpr -> std::str;
    CREATE PROPERTY schema::finalexpr -> std::str;
    CREATE PROPERTY schema::errmessage -> std::str;
    CREATE LINK schema::params -> schema::Parameter {
        SET cardinality := '**';
    };
};


CREATE ABSTRACT TYPE schema::ConsistencySubject EXTENDING schema::Object {
    CREATE LINK schema::constraints -> schema::Constraint {
        SET cardinality := '1*';
    };
};


ALTER TYPE schema::Constraint {
    CREATE LINK schema::subject :=
        __source__.<constraints[IS schema::ConsistencySubject];
};


CREATE TYPE schema::SourceIndex EXTENDING schema::Object {
    CREATE PROPERTY schema::expr -> std::str;
};


CREATE ABSTRACT TYPE schema::Source EXTENDING schema::Object {
    CREATE LINK schema::indexes -> schema::SourceIndex {
        SET cardinality := '1*';
    };
};


CREATE ABSTRACT TYPE schema::Pointer EXTENDING schema::Object;


ALTER TYPE schema::Source {
    CREATE LINK schema::pointers -> schema::Pointer {
        SET cardinality := '1*';
    };
};


CREATE TYPE schema::ScalarType EXTENDING
        (schema::InheritingObject, schema::ConsistencySubject, schema::Type) {
    CREATE PROPERTY schema::default -> std::str;
};


CREATE TYPE schema::ObjectType EXTENDING
        (schema::InheritingObject, schema::ConsistencySubject, schema::Type,
         schema::Source);


CREATE TYPE schema::UnionObjectType EXTENDING
        (schema::InheritingObject, schema::ConsistencySubject, schema::Type,
         schema::Source);


CREATE TYPE schema::DerivedObjectType EXTENDING
        (schema::InheritingObject, schema::ConsistencySubject, schema::Type,
         schema::Source);


CREATE TYPE schema::Link EXTENDING
        (schema::InheritingObject, schema::ConsistencySubject, schema::Pointer,
         schema::Source);


CREATE TYPE schema::DerivedLink EXTENDING
        (schema::InheritingObject, schema::ConsistencySubject, schema::Pointer,
         schema::Source);


CREATE TYPE schema::Property EXTENDING
        (schema::InheritingObject, schema::ConsistencySubject, schema::Pointer);


ALTER TYPE schema::Pointer {
    CREATE LINK schema::source -> schema::Source;
    CREATE LINK schema::target -> schema::Type;
};


ALTER TYPE schema::Link {
    CREATE LINK schema::properties := __source__.pointers;
};


ALTER TYPE schema::ObjectType {
    CREATE LINK schema::links := (SELECT __source__.pointers FILTER
                                  __source__.pointers IS schema::Link);

    CREATE LINK schema::properties := (SELECT __source__.pointers FILTER
                                       __source__.pointers IS schema::Property);
};


CREATE TYPE schema::Function EXTENDING schema::Object {
    CREATE LINK schema::params -> schema::Parameter {
        SET cardinality := '**';
    };
    CREATE LINK schema::returntype -> schema::Type;
    CREATE PROPERTY schema::aggregate -> std::bool;
    CREATE PROPERTY schema::set_returning -> std::bool;
};
