use phf::phf_set;

pub const UNRESERVED_KEYWORDS: phf::Set<&str> = phf_set!(
    "ABORT",
    "ABSTRACT",
    "ACCESS",
    "AFTER",
    "ALIAS",
    "ALLOW",
    "ALL",
    "ANNOTATION",
    "APPLIED",
    "AS",
    "ASC",
    "ASSIGNMENT",
    "BEFORE",
    "CARDINALITY",
    "CAST",
    "COMMITTED",
    "CONFIG",
    "CONFLICT",
    "CONSTRAINT",
    "CUBE",
    "CURRENT",
    "DATABASE",
    "DDL",
    "DECLARE",
    "DEFAULT",
    "DEFERRABLE",
    "DEFERRED",
    "DELEGATED",
    "DESC",
    "DENY",
    "EACH",
    "EMPTY",
    "EXPRESSION",
    "EXTENSION",
    "FINAL",
    "FIRST",
    "FROM",
    "FUNCTION",
    "FUTURE",
    "IMPLICIT",
    "INDEX",
    "INFIX",
    "INHERITABLE",
    "INSTANCE",
    "INTO",
    "ISOLATION",
    "JSON",
    "LAST",
    "LINK",
    "MIGRATION",
    "MULTI",
    "NAMED",
    "OBJECT",
    "OF",
    "ONLY",
    "ONTO",
    "OPERATOR",
    "OPTIONALITY",
    "ORDER",
    "ORPHAN",
    "OVERLOADED",
    "OWNED",
    "PACKAGE",
    "POLICY",
    "POPULATE",
    "POSTFIX",
    "PREFIX",
    "PROPERTY",
    "PROPOSED",
    "PSEUDO",
    "READ",
    "REJECT",
    "RELEASE",
    "RENAME",
    "REQUIRED",
    "RESET",
    "RESTRICT",
    "REWRITE",
    "ROLE",
    "ROLES",
    "ROLLUP",
    "SAVEPOINT",
    "SCALAR",
    "SCHEMA",
    "SDL",
    "SERIALIZABLE",
    "SESSION",
    "SOURCE",
    "SUPERUSER",
    "SYSTEM",
    "TARGET",
    "TERNARY",
    "TEXT",
    "THEN",
    "TO",
    "TRANSACTION",
    "TRIGGER",
    "TYPE",
    "UNLESS",
    "USING",
    "VERBOSE",
    "VERSION",
    "VIEW",
    "WRITE",
);

pub const PARTIAL_RESERVED_KEYWORDS: phf::Set<&str> = phf_set!("EXCEPT", "INTERSECT", "UNION",);

pub const FUTURE_RESERVED_KEYWORDS: phf::Set<&str> = phf_set!(
    "ANYARRAY",
    "BEGIN",
    "CASE",
    "CHECK",
    "DEALLOCATE",
    "DISCARD",
    "END",
    "EXPLAIN",
    "FETCH",
    "GET",
    "GLOBAL",
    "GRANT",
    "IMPORT",
    "LISTEN",
    "LOAD",
    "LOCK",
    "MATCH",
    "MOVE",
    "NOTIFY",
    "ON",
    "OVER",
    "PREPARE",
    "PARTITION",
    "RAISE",
    "REFRESH",
    "REVOKE",
    "SINGLE",
    "WHEN",
    "WINDOW",
    "NEVER",
);

pub const CURRENT_RESERVED_KEYWORDS: phf::Set<&str> = phf_set!(
    "__SOURCE__",
    "__SUBJECT__",
    "__TYPE__",
    "__STD__",
    "__EDGEDBSYS__",
    "__EDGEDBTPL__",
    "__NEW__",
    "__OLD__",
    "__SPECIFIED__",
    "ADMINISTER",
    "ALTER",
    "ANALYZE",
    "AND",
    "ANYTUPLE",
    "ANYTYPE",
    "BY",
    "COMMIT",
    "CONFIGURE",
    "CREATE",
    "DELETE",
    "DESCRIBE",
    "DETACHED",
    "DISTINCT",
    "DO",
    "DROP",
    "ELSE",
    "EXISTS",
    "EXTENDING",
    "FALSE",
    "FILTER",
    "FOR",
    "GROUP",
    "IF",
    "ILIKE",
    "IN",
    "INSERT",
    "INTROSPECT",
    "IS",
    "LIKE",
    "LIMIT",
    "MODULE",
    "NOT",
    "OFFSET",
    "OPTIONAL",
    "OR",
    "ROLLBACK",
    "SELECT",
    "SET",
    "START",
    "TRUE",
    "TYPEOF",
    "UPDATE",
    "VARIADIC",
    "WITH",
);

pub const COMBINED_KEYWORDS: phf::Set<&str> = phf_set!(
    "NAMED ONLY",
    "SET ANNOTATION",
    "SET TYPE",
    "EXTENSION PACKAGE",
    "ORDER BY",
);

pub fn lookup(s: &str) -> Option<Keyword> {
    None.or_else(|| PARTIAL_RESERVED_KEYWORDS.get_key(s))
        .or_else(|| FUTURE_RESERVED_KEYWORDS.get_key(s))
        .or_else(|| CURRENT_RESERVED_KEYWORDS.get_key(s))
        .map(|x| Keyword(x))
}

pub fn lookup_all(s: &str) -> Option<Keyword> {
    lookup(s).or_else(|| {
        None.or_else(|| COMBINED_KEYWORDS.get_key(s))
            .or_else(|| UNRESERVED_KEYWORDS.get_key(s))
            .map(|x| Keyword(x))
    })
}

/// This is required for serde deserializer for Token to work correctly.
#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Keyword(pub &'static str);

impl From<Keyword> for &'static str {
    fn from(value: Keyword) -> Self {
        value.0
    }
}
