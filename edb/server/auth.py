from typing import TYPE_CHECKING, Iterable, List, Optional, Any

if TYPE_CHECKING:
    class SigningCtx:
        def __init__(self) -> None: ...
        def set_issuer(self, issuer: str) -> None: ...
        def set_audience(self, audience: str) -> None: ...
        def set_expiry(self, expiry: int) -> None: ...
        def set_not_before(self, not_before: int) -> None: ...
        def allow(self, claim: str, values: List[str]) -> None: ...

    class JWKSet:
        @staticmethod
        def from_hs256_key(key: bytes) -> "JWKSet": ...
        def __init__(self) -> None: ...
        def generate(self, *, kid: Optional[str], kty: str) -> None: ...
        def add(self, **kwargs: Any) -> None: ...
        def load(self, keys: str) -> int: ...
        def load_json(self, keys: str) -> int: ...
        def set_issuer(self, issuer: str) -> None: ...
        def set_audience(self, audience: str) -> None: ...
        def set_expiry(self, expiry: int) -> None: ...
        def set_not_before(self, not_before: int) -> None: ...
        def allow(self, claim: str, values: List[str]) -> None: ...
        def deny(self, claim: str, values: List[str]) -> None: ...
        def export_pem(self, *, private_keys: bool) -> bytes: ...
        def export_json(self, *, private_keys: bool) -> bytes: ...
        def can_sign(self) -> bool: ...
        def sign(
            self, claims: dict[str, Any], *, ctx: Optional[SigningCtx] = None
        ) -> str: ...
        def validate(self, token: str) -> dict[str, Any]: ...
        def to_json(self, *, private_keys: bool) -> str: ...
        def to_pem(self, *, private_keys: bool) -> str: ...

    class JWKSetCache:
        def __init__(self, expiry_seconds: int) -> None: ...
        # Returns a tuple of (is_fresh, registry)
        def get(self, key: str) -> tuple[bool, Optional[JWKSet]]: ...
        def set(self, key: str, registry: JWKSet) -> None: ...

    def generate_gel_token(
        registry: JWKSet,
        *,
        instances: Optional[List[str] | Iterable[str]] = None,
        roles: Optional[List[str] | Iterable[str]] = None,
        databases: Optional[List[str] | Iterable[str]] = None,
    ) -> str: ...
else:
    from edb.server._rust_native._jwt import JWKSet, JWKSetCache, generate_gel_token, SigningCtx  # noqa
