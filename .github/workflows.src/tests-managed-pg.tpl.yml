<% from "tests.inc.yml" import build, calc_cache_key, restore_cache, setup_terraform -%>

<% macro setup_aws_creds() -%>
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
<%- endmacro -%>

<% macro setup_gcp_creds() -%>
    - name: Configure GCP Credentials
      uses: google-github-actions/setup-gcloud@main
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
<%- endmacro -%>

name: Tests on Managed PostgreSQL

on:
  schedule:
    - cron: "0 3 * * 6"
  workflow_dispatch:
    inputs: {}
  push:
    branches:
      - cloud-test

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    <%- call build() -%>
    - name: Compute cache keys
      run: |
        << calc_cache_key()|indent >>
    <%- endcall %>


  setup-aws-rds:
    runs-on: ubuntu-latest
    outputs:
      pghost: ${{ steps.pghost.outputs.stdout }}
    defaults:
      run:
        working-directory: .github/aws-rds
    steps:
      << setup_terraform()|indent(2) >>

      << setup_aws_creds()|indent(2) >>

      - name: Setup AWS RDS
        env:
          TF_VAR_sg_id: ${{ secrets.AWS_SECURITY_GROUP }}
          TF_VAR_password: ${{ secrets.AWS_RDS_PASSWORD }}
        run: |
          terraform apply -auto-approve

      - name: Store Terraform state
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: aws-rds-tfstate
          path: .github/aws-rds/terraform.tfstate
          retention-days: 1

      - name: Get RDS host
        id: pghost
        run: |
          terraform output -raw db_instance_address

  test-aws-rds:
    runs-on: ubuntu-latest
    needs: [setup-aws-rds, build]
    steps:
    <<- restore_cache() >>

    # Run the test

    - name: Test
      env:
        EDGEDB_TEST_BACKEND_DSN: postgres://edbtest:${{ secrets.AWS_RDS_PASSWORD }}@${{ needs.setup-aws-rds.outputs.pghost }}/postgres
      run: |
        edb server --bootstrap-only --backend-dsn=$EDGEDB_TEST_BACKEND_DSN --testmode
        edb test -j2 -v --backend-dsn=$EDGEDB_TEST_BACKEND_DSN

  teardown-aws-rds:
    runs-on: ubuntu-latest
    needs: test-aws-rds
    if: ${{ always() }}
    defaults:
      run:
        working-directory: .github/aws-rds
    steps:
      << setup_terraform()|indent(2) >>

      << setup_aws_creds()|indent(2) >>

      - name: Restore Terraform state
        uses: actions/download-artifact@v3
        with:
          name: aws-rds-tfstate
          path: .github/aws-rds

      - name: Destroy AWS RDS
        run: terraform destroy -auto-approve
        env:
          TF_VAR_sg_id: ${{ secrets.AWS_SECURITY_GROUP }}
          TF_VAR_password: ${{ secrets.AWS_RDS_PASSWORD }}

      - name: Overwrite Terraform state
        uses: actions/upload-artifact@v3
        with:
          name: aws-rds-tfstate
          path: .github/aws-rds/terraform.tfstate
          retention-days: 1


  setup-do-database:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .github/do-database
    steps:
      << setup_terraform()|indent(2) >>

      - name: Setup DigitalOcean Database
        env:
          TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
        run: |
          terraform apply -auto-approve

      - name: Store Terraform state
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: do-database-tfstate
          path: .github/do-database/terraform.tfstate
          retention-days: 1

  test-do-database:
    runs-on: ubuntu-latest
    needs: [setup-do-database, build]
    steps:
    <<- restore_cache() >>

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Initialize Terraform
      working-directory: .github/do-database
      run: terraform init

    - name: Restore Terraform state
      uses: actions/download-artifact@v3
      with:
        name: do-database-tfstate
        path: .github/do-database

    - name: Get Database host
      id: pghost
      working-directory: .github/do-database
      run: |
        terraform output -raw db_instance_address

    - name: Get Database port
      id: pgport
      working-directory: .github/do-database
      run: |
        terraform output -raw db_instance_port

    - name: Get Database user
      id: pguser
      working-directory: .github/do-database
      run: |
        terraform output -raw db_instance_user

    - name: Get Database password
      id: pgpass
      working-directory: .github/do-database
      run: |
        terraform output -raw db_instance_password

    - name: Get Database dbname
      id: pgdatabase
      working-directory: .github/do-database
      run: |
        terraform output -raw db_instance_database

    # Run the test

    - name: Test
      env:
        EDGEDB_TEST_BACKEND_DSN: postgres://${{ steps.pguser.outputs.stdout }}:${{ steps.pgpass.outputs.stdout }}@${{ steps.pghost.outputs.stdout }}:${{ steps.pgport.outputs.stdout }}/${{ steps.pgdatabase.outputs.stdout }}
      run: |
        edb server --bootstrap-only --backend-dsn=$EDGEDB_TEST_BACKEND_DSN --testmode
        edb test -j2 -v --backend-dsn=$EDGEDB_TEST_BACKEND_DSN

  teardown-do-database:
    runs-on: ubuntu-latest
    needs: test-do-database
    if: ${{ always() }}
    defaults:
      run:
        working-directory: .github/do-database
    steps:
      << setup_terraform()|indent(2) >>

      - name: Restore Terraform state
        uses: actions/download-artifact@v3
        with:
          name: do-database-tfstate
          path: .github/do-database

      - name: Destroy DigitalOcean Database
        run: terraform destroy -auto-approve
        env:
          TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Overwrite Terraform state
        uses: actions/upload-artifact@v3
        with:
          name: do-database-tfstate
          path: .github/do-database/terraform.tfstate
          retention-days: 1


  setup-gcp-cloud-sql:
    runs-on: ubuntu-latest
    outputs:
      pghost: ${{ steps.pghost.outputs.stdout }}
    defaults:
      run:
        working-directory: .github/gcp-cloud-sql
    steps:
      << setup_terraform()|indent(2) >>

      << setup_gcp_creds()|indent(2) >>

      - name: Setup GCP Cloud SQL
        env:
          TF_VAR_password: ${{ secrets.AWS_RDS_PASSWORD }}
        run: |
          terraform apply -auto-approve

      - name: Store Terraform state
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: gcp-cloud-sql-tfstate
          path: .github/gcp-cloud-sql/terraform.tfstate
          retention-days: 1

      - name: Get Cloud SQL host
        id: pghost
        run: |
          terraform output -raw db_instance_address

  test-gcp-cloud-sql:
    runs-on: ubuntu-latest
    needs: [setup-gcp-cloud-sql, build]
    steps:
    <<- restore_cache() >>

    # Run the test

    - name: Test
      env:
        EDGEDB_TEST_BACKEND_DSN: postgres://postgres:${{ secrets.AWS_RDS_PASSWORD }}@${{ needs.setup-gcp-cloud-sql.outputs.pghost }}/postgres
      run: |
        edb server --bootstrap-only --backend-dsn=$EDGEDB_TEST_BACKEND_DSN --testmode
        edb test -j2 -v --backend-dsn=$EDGEDB_TEST_BACKEND_DSN

  teardown-gcp-cloud-sql:
    runs-on: ubuntu-latest
    needs: test-gcp-cloud-sql
    if: ${{ always() }}
    defaults:
      run:
        working-directory: .github/gcp-cloud-sql
    steps:
      << setup_terraform()|indent(2) >>

      << setup_gcp_creds()|indent(2) >>

      - name: Restore Terraform state
        uses: actions/download-artifact@v3
        with:
          name: gcp-cloud-sql-tfstate
          path: .github/gcp-cloud-sql

      - name: Destroy GCP Cloud SQL
        run: terraform destroy -auto-approve
        env:
          TF_VAR_password: ${{ secrets.AWS_RDS_PASSWORD }}

      - name: Overwrite Terraform state
        uses: actions/upload-artifact@v3
        with:
          name: gcp-cloud-sql-tfstate
          path: .github/gcp-cloud-sql/terraform.tfstate
          retention-days: 1


  setup-aws-aurora:
    runs-on: ubuntu-latest
    outputs:
      pghost: ${{ steps.pghost.outputs.stdout }}
    defaults:
      run:
        working-directory: .github/aws-aurora
    steps:
      << setup_terraform()|indent(2) >>

      << setup_aws_creds()|indent(2) >>

      - name: Setup AWS RDS Aurora
        env:
          TF_VAR_sg_id: ${{ secrets.AWS_SECURITY_GROUP }}
          TF_VAR_password: ${{ secrets.AWS_RDS_PASSWORD }}
          TF_VAR_vpc_id: ${{ secrets.AWS_VPC_ID }}
        run: |
          terraform apply -auto-approve

      - name: Store Terraform state
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: aws-aurora-tfstate
          path: .github/aws-aurora/terraform.tfstate
          retention-days: 1

      - name: Get RDS Aurora host
        id: pghost
        run: |
          terraform output -raw rds_cluster_endpoint

  test-aws-aurora:
    runs-on: ubuntu-latest
    needs: [setup-aws-aurora, build]
    steps:
    <<- restore_cache() >>

    # Run the test

    - name: Test
      env:
        EDGEDB_TEST_BACKEND_DSN: postgres://edbtest:${{ secrets.AWS_RDS_PASSWORD }}@${{ needs.setup-aws-aurora.outputs.pghost }}/postgres
      run: |
        edb server --bootstrap-only --backend-dsn=$EDGEDB_TEST_BACKEND_DSN --testmode
        edb test -j1 -v --backend-dsn=$EDGEDB_TEST_BACKEND_DSN

  teardown-aws-aurora:
    runs-on: ubuntu-latest
    needs: test-aws-aurora
    if: ${{ always() }}
    defaults:
      run:
        working-directory: .github/aws-aurora
    steps:
      << setup_terraform()|indent(2) >>

      << setup_aws_creds()|indent(2) >>

      - name: Restore Terraform state
        uses: actions/download-artifact@v3
        with:
          name: aws-aurora-tfstate
          path: .github/aws-aurora

      - name: Destroy AWS RDS Aurora
        run: terraform destroy -auto-approve
        env:
          TF_VAR_sg_id: ${{ secrets.AWS_SECURITY_GROUP }}
          TF_VAR_password: ${{ secrets.AWS_RDS_PASSWORD }}
          TF_VAR_vpc_id: ${{ secrets.AWS_VPC_ID }}

      - name: Overwrite Terraform state
        uses: actions/upload-artifact@v3
        with:
          name: aws-aurora-tfstate
          path: .github/aws-aurora/terraform.tfstate
          retention-days: 1


  setup-heroku-postgres:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .github/heroku-postgres
    steps:
      << setup_terraform()|indent(2) >>

      - name: Setup Heroku Postgres
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
        run: |
          terraform apply -auto-approve

      - name: Store Terraform state
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: heroku-postgres-tfstate
          path: .github/heroku-postgres/terraform.tfstate
          retention-days: 1

  test-heroku-postgres:
    runs-on: ubuntu-latest
    needs: [setup-heroku-postgres, build]
    steps:
    <<- restore_cache() >>

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Initialize Terraform
      working-directory: .github/heroku-postgres
      run: terraform init

    - name: Restore Terraform state
      uses: actions/download-artifact@v3
      with:
        name: heroku-postgres-tfstate
        path: .github/heroku-postgres

    - name: Get Heroku Postgres DSN
      id: pgdsn
      working-directory: .github/heroku-postgres
      run: |
        terraform output -raw heroku_postgres_dsn

    # Run the test

    - name: Test
      env:
        EDGEDB_TEST_BACKEND_VENDOR: heroku-postgres
        EDGEDB_TEST_BACKEND_DSN: ${{ steps.pgdsn.outputs.stdout }}
      run: |
        edb server --bootstrap-only --backend-dsn=$EDGEDB_TEST_BACKEND_DSN --testmode
        edb test -j1 -v --backend-dsn=$EDGEDB_TEST_BACKEND_DSN

  teardown-heroku-postgres:
    runs-on: ubuntu-latest
    needs: test-heroku-postgres
    if: ${{ always() }}
    defaults:
      run:
        working-directory: .github/heroku-postgres
    steps:
      << setup_terraform()|indent(2) >>

      << setup_aws_creds()|indent(2) >>

      - name: Restore Terraform state
        uses: actions/download-artifact@v3
        with:
          name: heroku-postgres-tfstate
          path: .github/heroku-postgres

      - name: Destroy Heroku Postgres
        run: terraform destroy -auto-approve
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}

      - name: Overwrite Terraform state
        uses: actions/upload-artifact@v3
        with:
          name: heroku-postgres-tfstate
          path: .github/heroku-postgres/terraform.tfstate
          retention-days: 1


  workflow-notifications:
    if: failure() && github.event_name != 'pull_request'
    name: Notify in Slack on failures
    needs:
      - setup-aws-rds
      - test-aws-rds
      - teardown-aws-rds
      - setup-do-database
      - test-do-database
      - teardown-do-database
      - setup-gcp-cloud-sql
      - test-gcp-cloud-sql
      - teardown-gcp-cloud-sql
      - setup-aws-aurora
      - test-aws-aurora
      - teardown-aws-aurora
      - setup-heroku-postgres
      - test-heroku-postgres
      - teardown-heroku-postgres
    runs-on: ubuntu-latest
    permissions:
      actions: 'read'
    steps:
      - name: Slack Workflow Notification
        uses: Gamesight/slack-workflow-status@26a36836c887f260477432e4314ec3490a84f309
        with:
          repo_token: ${{secrets.GITHUB_TOKEN}}
          slack_webhook_url: ${{secrets.ACTIONS_SLACK_WEBHOOK_URL}}
          name: 'Workflow notifications'
          icon_emoji: ':hammer:'
          include_jobs: 'on-failure'
