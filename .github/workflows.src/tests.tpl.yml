<% from "tests.inc.yml" import init, build, calc_cache_key, install_python_requirements, restore_cache -%>
name: Tests

on:
  push:
    branches:
      - master
      - ci
      - "release/*"
  pull_request:
    branches:
      - '**'
  schedule:
    - cron: "0 */3 * * *"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    <%- call build() -%>
    - name: Compute cache keys and download the running times log
      env:
        GIST_TOKEN: ${{ secrets.CI_BOT_GIST_TOKEN }}
      run: |
        << calc_cache_key()|indent >>

        curl \
          -H "Accept: application/vnd.github.v3+json" \
          -u edgedb-ci:$GIST_TOKEN \
          https://api.github.com/gists/8b722a65397f7c4c0df72f5394efa04c \
        | jq '.files."time_stats.csv".raw_url' \
        | xargs curl > shared-artifacts/time_stats.csv
    <%- endcall %>

  cargo-test:
    needs: build
    runs-on: ubuntu-latest

    steps:
    << init() >>
    << install_python_requirements() >>

    - name: Download cache key
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16  # v4.1.8
      with:
        name: shared-artifacts
        path: shared-artifacts

    - name: Generate environment variables
      run: |
        echo BUILD_TEMP=$(python setup.py -q ci_helper --type build_temp) >> $GITHUB_ENV

    - name: Handle Rust extensions build cache
      uses: actions/cache@v4
      id: rust-cache
      with:
        path: ${{ env.BUILD_TEMP }}/rust/extensions
        key: edb-rust-build-v1-${{ hashFiles('shared-artifacts/rust_cache_key.txt') }}

    - name: Install Rust toolchain
      uses: dsherret/rust-toolchain-file@v1

    - name: Cargo test
      env:
        CARGO_TARGET_DIR: ${{ env.BUILD_TEMP }}/rust/extensions
        CARGO_HOME: ${{ env.BUILD_TEMP }}/rust/extensions/cargo_home
      run:
        cargo test --all-features

  python-test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [
           1,  2,  3,  4,
           5,  6,  7,  8,
           9, 10, 11, 12,
          13, 14, 15, 16,
        ]

    steps:
    <<- restore_cache() >>

    # Run the test

    - name: Install Rust toolchain
      uses: dsherret/rust-toolchain-file@v1

    - name: Test
      env:
        SHARD: ${{ matrix.shard }}
        EDGEDB_TEST_REPEATS: 1
      run: |
        mkdir -p results/
        cp shared-artifacts/time_stats.csv results/running_times_${SHARD}.csv
        edb test --jobs 2 --verbose --shard ${SHARD}/16 \
          --running-times-log=results/running_times_${SHARD}.csv \
          --result-log=results/result_${SHARD}.json

    - name: Upload test results
      uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874  # v4.4.0
      if: ${{ always() }}
      with:
        name: python-test-results-${{ matrix.shard }}
        path: results
        retention-days: 1

  python-test-list:
    needs: build
    runs-on: ubuntu-latest
    steps:
    <<- restore_cache() >>

    # List tests and upload

    - name: Generate complete list of tests for verification
      env:
        SHARD: ${{ matrix.shard }}
        EDGEDB_TEST_REPEATS: 1
      run: |
        edb test --list > shared-artifacts/all_tests.txt

    - name: Upload list of tests
      uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874  # v4.4.0
      with:
        name: test-list
        path: shared-artifacts
        retention-days: 1

  test-conclusion:
    needs: [cargo-test, python-test, python-test-list]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.2'

      - name: Install Python deps
        run: |
          python -m pip install requests click

      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Download python-test results
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16  # v4.1.8
        with:
          pattern: python-test-results-*
          merge-multiple: true
          path: results

      # Render results and exit if they were unsuccessful
      - name: Render results
        run: |
          python edb/tools/test/results.py 'results/result_*.json'

      - name: Download shared artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16  # v4.1.8
        with:
          name: shared-artifacts
          path: shared-artifacts

      - name: Download test list
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16  # v4.1.8
        with:
          name: test-list
          path: shared-artifacts

      - name: Merge stats and verify tests completion
        shell: python
        env:
          GIST_TOKEN: ${{ secrets.CI_BOT_GIST_TOKEN }}
          GIT_REF: ${{ github.ref }}
        run: |
          import csv
          import glob
          import io
          import os
          import requests

          orig = {}
          new = {}
          all_tests = set()
          with open("shared-artifacts/time_stats.csv") as f:
              for name, t, c in csv.reader(f):
                  assert name not in orig, "duplicate test name in original stats!"
                  orig[name] = (t, int(c))

          with open("shared-artifacts/all_tests.txt") as f:
              for line in f:
                  assert line not in all_tests, "duplicate test name in this run!"
                  all_tests.add(line.strip())

          for new_file in glob.glob("results/running_times_*.csv"):
              with open(new_file) as f:
                  for name, t, c in csv.reader(f):
                      if int(c) > orig.get(name, (0, 0))[1]:
                          if name.startswith("setup::"):
                              new[name] = (t, c)
                          else:
                              assert name not in new, f"duplicate test! {name}"
                              new[name] = (t, c)
                              all_tests.remove(name)

          assert not all_tests, "Tests not run! \n" + "\n".join(all_tests)

          if os.environ["GIT_REF"] == "refs/heads/master":
              buf = io.StringIO()
              writer = csv.writer(buf)
              orig.update(new)
              for k, v in sorted(orig.items()):
                  writer.writerow((k,) + v)

              resp = requests.patch(
                  "https://api.github.com/gists/8b722a65397f7c4c0df72f5394efa04c",
                  headers={"Accept": "application/vnd.github.v3+json"},
                  auth=("edgedb-ci", os.environ["GIST_TOKEN"]),
                  json={"files": {"time_stats.csv": {"content": buf.getvalue()}}},
              )
              resp.raise_for_status()


  workflow-notifications:
    if: failure() && github.event_name != 'pull_request'
    name: Notify in Slack on failures
    needs:
      - test-conclusion
    runs-on: ubuntu-latest
    permissions:
      actions: 'read'
    steps:
      - name: Slack Workflow Notification
        uses: Gamesight/slack-workflow-status@26a36836c887f260477432e4314ec3490a84f309
        with:
          repo_token: ${{secrets.GITHUB_TOKEN}}
          slack_webhook_url: ${{secrets.ACTIONS_SLACK_WEBHOOK_URL}}
          name: 'Workflow notifications'
          icon_emoji: ':hammer:'
          include_jobs: 'on-failure'
