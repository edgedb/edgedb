<% from "tests.inc.yml" import build, calc_cache_key, restore_cache, setup_terraform -%>

name: Tests on PostgreSQL Versions

on:
  schedule:
    - cron: "0 3 * * *"
  workflow_dispatch:
    inputs: {}
  push:
    branches:
      - pg-test

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    <%- call build() -%>
    - name: Compute cache keys
      run: |
        << calc_cache_key()|indent >>
    <%- endcall %>

  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        postgres-version: [ 14 ]
        single-mode:
         - ''
         - 'NOCREATEDB NOCREATEROLE'
         - 'CREATEDB NOCREATEROLE'
        remote-compiler: [ '' ]
        include:
          - postgres-version: 13
            single-mode: ''
            remote-compiler: ''
          - postgres-version: 14
            single-mode: ''
            remote-compiler: 'remote-compiler'
          - postgres-version: 15
            single-mode: ''
            remote-compiler: ''
    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}-alpine
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    <<- restore_cache() >>

    # Run the test

    - name: Setup single mode role and database
      if: ${{ matrix.single-mode }}
      shell: python
      run: |
        import asyncio
        import subprocess

        from edb.server.pgcluster import get_pg_bin_dir

        async def main():
            psql = await get_pg_bin_dir() / "psql"
            dsn = "postgres://postgres:postgres@localhost/postgres"

            script = """\
                CREATE ROLE singles;
                ALTER ROLE singles WITH LOGIN PASSWORD 'test' NOSUPERUSER
                  ${{ matrix.single-mode }};
                CREATE DATABASE singles OWNER singles;
                REVOKE ALL ON DATABASE singles FROM PUBLIC;
                GRANT CONNECT ON DATABASE singles TO singles;
                GRANT ALL ON DATABASE singles TO singles;
            """

            subprocess.run(
                [str(psql), dsn],
                check=True,
                text=True,
                input=script,
            )

        asyncio.run(main())

    - name: Test
      env:
        EDGEDB_TEST_POSTGRES_VERSION: ${{ matrix.postgres-version }}
      continue-on-error: ${{ matrix.postgres-version == 15 }}
      run: |
        if [[ "${{ matrix.single-mode }}" ]]; then
          export EDGEDB_TEST_BACKEND_DSN=postgres://singles:test@localhost/singles
        else
          export EDGEDB_TEST_BACKEND_DSN=postgres://postgres:postgres@localhost/postgres
        fi
        edb server --bootstrap-only --backend-dsn=$EDGEDB_TEST_BACKEND_DSN --testmode
        if [[ "${{ matrix.single-mode }}" == *"NOCREATEDB"* ]]; then
          edb test -j1 -v --backend-dsn=$EDGEDB_TEST_BACKEND_DSN
        else
          edb test -j2 -v --backend-dsn=$EDGEDB_TEST_BACKEND_DSN
        fi
