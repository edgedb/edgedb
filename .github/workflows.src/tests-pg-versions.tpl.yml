<% from "tests.inc.yml" import build, calc_cache_key, restore_cache, setup_terraform -%>

name: Tests on PostgreSQL Versions

on:
  schedule:
    - cron: "0 3 * * *"
  workflow_dispatch:
    inputs: {}
  push:
    branches:
      - pg-test

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    <%- call build() -%>
    - name: Compute cache keys
      run: |
        << calc_cache_key()|indent >>
    <%- endcall %>

  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        postgres-version: [ 16 ]
        single-mode:
         - ''
         - 'NOCREATEDB NOCREATEROLE'
         - 'CREATEDB NOCREATEROLE'
        multi-tenant-mode: [ '' ]
        include:
          - postgres-version: 14
            single-mode: ''
            multi-tenant-mode: ''
          - postgres-version: 15
            single-mode: ''
            multi-tenant-mode: ''
          - postgres-version: 16
            single-mode: ''
            multi-tenant-mode: 'remote-compiler'
          - postgres-version: 16
            single-mode: ''
            multi-tenant-mode: 'multi-tenant'
    services:
      postgres:
        image: pgvector/pgvector:0.6.2-pg${{ matrix.postgres-version }}
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name postgres
        ports:
          - 5432:5432

    steps:
    - name: Trust pgvector extension
      uses: docker://docker
      with:
        args: docker exec postgres sed -i $a\trusted=true /usr/share/postgresql/${{ matrix.postgres-version }}/extension/vector.control

    <<- restore_cache() >>

    # Run the test

    - name: Setup single mode role and database
      if: ${{ matrix.single-mode }}
      shell: python
      run: |
        import asyncio
        import subprocess

        from edb.server.pgcluster import get_pg_bin_dir

        async def main():
            psql = await get_pg_bin_dir() / "psql"
            dsn = "postgres://postgres:postgres@localhost/postgres"

            script = """\
                CREATE ROLE singles;
                ALTER ROLE singles WITH LOGIN PASSWORD 'test' NOSUPERUSER
                  ${{ matrix.single-mode }};
                CREATE DATABASE singles OWNER singles;
                REVOKE ALL ON DATABASE singles FROM PUBLIC;
                GRANT CONNECT ON DATABASE singles TO singles;
                GRANT ALL ON DATABASE singles TO singles;
            """

            subprocess.run(
                [str(psql), dsn],
                check=True,
                text=True,
                input=script,
            )

        asyncio.run(main())

    - name: Test
      env:
        EDGEDB_TEST_POSTGRES_VERSION: ${{ matrix.postgres-version }}
      run: |
        if [[ "${{ matrix.single-mode }}" ]]; then
          export EDGEDB_TEST_BACKEND_DSN=postgres://singles:test@localhost/singles
        else
          export EDGEDB_TEST_BACKEND_DSN=postgres://postgres:postgres@localhost/postgres
        fi
        if [[ "${{ matrix.multi-tenant-mode }}" == "remote-compiler" ]]; then
          export EDGEDB_TEST_REMOTE_COMPILER=localhost:5660
          export _EDGEDB_SERVER_COMPILER_POOL_SECRET=secret
          __EDGEDB_DEVMODE=1 edgedb-server compiler --pool-size 2 &
        fi
        edb server --bootstrap-only --backend-dsn=$EDGEDB_TEST_BACKEND_DSN --testmode
        if [[ "${{ matrix.multi-tenant-mode }}" == "multi-tenant" ]]; then
          export EDGEDB_SERVER_MULTITENANT_CONFIG_FILE=/tmp/edb.mt.json
          echo "{\"localhost\":{\"instance-name\":\"localtest\",\"backend-dsn\":\"$EDGEDB_TEST_BACKEND_DSN\",\"admin\":true,\"max-backend-connections\":10}}" > /tmp/edb.mt.json
        fi
        if [[ "${{ matrix.single-mode }}" == *"NOCREATEDB"* ]]; then
          edb test -j1 -v --backend-dsn=$EDGEDB_TEST_BACKEND_DSN
        else
          edb test -j2 -v --backend-dsn=$EDGEDB_TEST_BACKEND_DSN
        fi


  workflow-notifications:
    if: failure() && github.event_name != 'pull_request'
    name: Notify in Slack on failures
    needs:
      - build
      - test
    runs-on: ubuntu-latest
    permissions:
      actions: 'read'
    steps:
      - name: Slack Workflow Notification
        uses: Gamesight/slack-workflow-status@26a36836c887f260477432e4314ec3490a84f309
        with:
          repo_token: ${{secrets.GITHUB_TOKEN}}
          slack_webhook_url: ${{secrets.ACTIONS_SLACK_WEBHOOK_URL}}
          name: 'Workflow notifications'
          icon_emoji: ':hammer:'
          include_jobs: 'on-failure'
