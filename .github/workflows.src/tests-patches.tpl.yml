<% from "tests.inc.yml" import build, calc_cache_key, restore_cache -%>

name: Tests of patching old EdgeDB Versions

on:
  workflow_dispatch:
    inputs: {}
  pull_request:
    branches:
      - stable/*
  push:
    branches:
      - patch-test*
      - stable/*

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    <%- call build() -%>
    - name: Compute cache keys
      run: |
        << calc_cache_key()|indent >>
    <%- endcall %>

  compute-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - id: set-matrix
      name: Compute versions to run on
      shell: python
      run: |
        import json
        import os
        import re
        from urllib import request

        base = 'https://packages.edgedb.com'
        u = f'{base}/archive/.jsonindexes/x86_64-unknown-linux-gnu.json'
        data = json.loads(request.urlopen(u).read())

        u = f'{base}/archive/.jsonindexes/x86_64-unknown-linux-gnu.testing.json'
        data_testing = json.loads(request.urlopen(u).read())


        branch = os.getenv('GITHUB_BASE_REF') or os.getenv('GITHUB_REF_NAME')
        print("BRANCH", branch)
        version = int(re.findall(r'\d+', branch)[0])

        versions = []
        for obj in data['packages'] + data_testing['packages']:
            if (
                obj['version_details']['major'] == version
                and (
                    not obj['version_details']['prerelease']
                    or obj['version_details']['prerelease'][0]['phase'] in ('beta', 'rc')
                )
            ):
                versions.append((obj['version'], base + obj['installrefs'][0]['ref']))

        matrix = {
            "include": [
                {"edgedb-version": v, "edgedb-url": url, "make-dbs": mk}
                for v, url in versions
                for mk in [True, False]
            ]
        }

        print("matrix:", matrix)
        with open(os.getenv('GITHUB_OUTPUT'), 'a') as f:
            print(f'matrix={json.dumps(matrix)}', file=f)

  test:
    runs-on: ubuntu-latest
    needs: [build, compute-versions]
    strategy:
      fail-fast: false
      matrix: ${{fromJSON(needs.compute-versions.outputs.matrix)}}

    steps:
    <<- restore_cache() >>

    # Run the test

    - name: Download an earlier database version and set up a instance
      env:
        EDGEDB_VERSION: ${{ matrix.edgedb-version }}
        EDGEDB_URL: ${{ matrix.edgedb-url }}
      run: |
        wget -q "$EDGEDB_URL"
        tar xzf edgedb-server-$EDGEDB_VERSION.tar.gz
        edgedb-server-$EDGEDB_VERSION/bin/edgedb-server -D test-dir --bootstrap-only --testmode

    - name: Create databases on the older version
      env:
        EDGEDB_VERSION: ${{ matrix.edgedb-version }}
      if: ${{ matrix.make-dbs }}
      shell: python
      run: |
        import edgedb
        import os
        import subprocess

        version = os.getenv('EDGEDB_VERSION')
        cmd = [
            f'edgedb-server-{version}/bin/edgedb-server', '-D' 'test-dir',
            '--testmode', '--security', 'insecure_dev_mode', '--port', '10000',
        ]
        proc = subprocess.Popen(cmd)

        db = edgedb.create_client(
            host='localhost', port=10000, tls_security='insecure'
        )
        for name in ['json', 'functions', 'expressions', 'casts', 'policies']:
            db.execute(f'create database {name};')

        proc.terminate()
        proc.wait()

    - name: Run tests with instance created on an older version
      run: |
        # Should we run *all* the tests?
        edb test -j2 -v --data-dir test-dir tests/test_edgeql_json.py tests/test_edgeql_casts.py tests/test_edgeql_functions.py tests/test_edgeql_expressions.py tests/test_edgeql_policies.py

    - name: Test downgrading a database after an upgrade
      env:
        EDGEDB_VERSION: ${{ matrix.edgedb-version }}
      shell: python
      run: |
          import edgedb
          import os
          import subprocess
          import json

          version = os.getenv('EDGEDB_VERSION')
          cmd = [
              f'edgedb-server-{version}/bin/edgedb-server', '-D' 'test-dir',
              '--testmode', '--security', 'insecure_dev_mode', '--port', '10000',
          ]
          proc = subprocess.Popen(cmd)

          db = edgedb.create_client(
              host='localhost', port=10000, tls_security='insecure',
              database='policies',
          )

          try:
              # Test that a basic query works
              res = json.loads(db.query_json('''
                  select Issue { name, number, watchers: {name} }
                  filter .number = "1"
              '''))
              expected = [{
                  "name": "Release EdgeDB",
                  "number": "1",
                  "watchers": [{"name": "Yury"}],
              }]

              assert res == expected, res
          finally:
              proc.terminate()
              proc.wait()
