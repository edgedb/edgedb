========
1.0 RC 2
========

This changelog summarizes new features and breaking changes in
EdgeDB 1.0 Release Candidate 2 "Lacaille".


Migrations
==========

We continue fixing bugs that affect schema definitions and migrations.
The most notable changes involve static cardinality inference, so that
computed links and properties can be defined to mimic their regular
counterparts:

* Fix creation of required computed links (:eql:gh:`#2985`).

  This allows having ``required`` links in the schema even if they are
  computed:

  .. code-block:: sdl

    type User {
        required link profile -> Profile;
    }

    type Profile {
        required link user := assert_exists(.<profile[IS User]);
    }


EdgeQL
======

* Make static analysis correctly handle the cardinality of things
  wrapped in :eql:func:`enumerate` (:eql:gh:`#3014`).

  This means that if you wrap a single property into
  :eql:func:`enumerate` it still is correctly inferred to produce no
  more than one result:

  .. code-block:: edgeql-repl

    db> SELECT User {comp := enumerate(.name)}
    {default::User {comp: (0, 'alice')}}

* Fix some issues with :eql:func:`enumerate` applied to the results of
  another function (:eql:gh:`#3025`).

* Fix :eql:func:`assert_distinct` on tuples (:eql:gh:`#2990`)

* Fix a case where :eql:stmt:`FOR` over an empty set erroneously
  produced a non-empty result (:eql:gh:`#3012`).

* Fix :eql:constraint:`exclusive` constraint issue when conflicting
  entries are inserted at the same time (:eql:gh:`#3022`).

* Fix issues with how tuple elements are correlated (:eql:gh:`#3001`).

* Fix how functions or operators with ``optional`` parameters such as
  :eql:op:`??<COALESCE>` interact with shape subqueries
  (:eql:gh:`#3008`).

  This makes it possible to have a shape as one element of a tuple to
  be correlated with the expression in the other tuple element:

  .. code-block:: edgeql-repl

    db> SELECT (
    ...   User {name, friends: {name}},
    ...   User.friends.name ?? 'n/a'
    ... );
    {
      (
        default::User {
          name: 'Alice',
          friends: {default::User {name: 'Billie'}},
        },
        'Billie',
      ),
      (
        default::User {
          name: 'Alice',
          friends: {default::User {name: 'Cameron'}},
        },
        'Cameron',
      ),
      (
        default::User {
          name: 'Alice',
          friends: {default::Bot {name: 'Dana'}},
        },
        'Dana',
      ),
      (default::User {name: 'Billie', friends: {}}, 'n/a'),
      (default::User {name: 'Cameron', friends: {}}, 'n/a'),
      (
        default::Bot {
          name: 'Dana',
          friends: {default::User {name: 'Billie'}},
        },
        'Billie',
      ),
    }

* Fix issues with arrays of objects of related types (:eql:gh:`#2256`).

  Trying to build an array where elements are not of the same object
  type, but of related types no longer produces an error:

  .. code-block:: edgeql-repl

    db> SELECT [(SELECT User FILTER .name = 'alice'), (SELECT SystemUser)];
    {
      [
        default::User {id: 8f69777e-3129-11ec-ba91-0f55d65fd8d7},
        default::SystemUser {id: 89c0e596-3129-11ec-ba91-2f631728aea3},
      ],
    }

  Conceptually, there's no difference between first creating a set via
  :eql:op:`UNION` and using :eql:func:`array_agg` on it or using an
  array constructor directly and supply the individual elements as
  subqueries.

* Fix many bugs with objects inside arrays and tuples (:eql:gh:`#2992`).

  Packing and unpacking objects into arrays and tuples now works more
  reliably. You can make use of the different way of selecting the
  data, aggregate it using :eql:func:`array_agg` or by some other
  means and still be able to access the elements to get their nested
  contents in queries:

  .. code-block:: edgeql-repl

    db> SELECT [(User,)][0];
    {
      (default::User {id: 8f69777e-3129-11ec-ba91-0f55d65fd8d7}),
    }
    db> SELECT ([User],).0;
    {
      [default::User {id: 8f69777e-3129-11ec-ba91-0f55d65fd8d7}],
    }


Bindings
========

We now have the *client* abstraction superceding the *connection* and
*pool* abstractions. There's no conceptual difference between a pool
of size 1 and a single connection, so we decided that the API should
reflect that. So we introduce a single concept of *client* to send
queries to the database and let this *client* encapsulate the handling
of concurrent connections.

We're making our binding more robust by adding "retry options" to our
interface. What it means is that read-only queries and all
transactions can be automatically retried in case of certain kinds of
errors (such as network errors) without the need for any extra code on
the part of the developers.

We're also in the process of cleaning up our APIs and removing the
deprecated functions.

* Support connection pooling by default and retry features for
  `edgedb-python <https://github.com/edgedb/edgedb-python>`_ and
  release v0.18.0a2 driver.
* Support connection pooling by default and retry features for
  `edgedb-js <https://github.com/edgedb/edgedb-js>`_ and release
  v0.15.3 driver.
* Support connection pooling by default and retry features for
  `edgedb-go <https://github.com/edgedb/edgedb-go>`_ and release
  v0.8.3 driver.
