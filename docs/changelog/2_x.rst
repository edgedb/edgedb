====
v2.0
====

:edb-alt-title: EdgeDB v2 (Sagittarius)

.. image:: images/v2_sagittarius.jpg
    :width: 100%

EdgeDB 2.0 was released on July 28th, 2022. Read the announcement
blog post `here <v2anno_>`_.

We would like to thank our community for reporting issues and contributing
fixes. You are awesome! ❤️


To play with the new features, install `the CLI
<https://www.edgedb.com/install>`_ and initialize a new project. For an
interesting schema with test data, check out the `MCU Sandbox
<https://github.com/edgedb/mcu-sandbox>`_ repo.

.. code-block:: bash

  $ edgedb project init


Upgrading
=========

**Local instances**

To upgrade a local project, run the following command inside the project
directory.

.. code-block:: bash

  $ edgedb project upgrade --to-latest

Alternatively, specify an instance name if you aren't using a project.

.. code-block:: bash

  $ edgedb project upgrade --to-latest -I my_instance

**Hosted instances**

To upgrade a remote (hosted) instance, we recommend the following
dump-and-restore process.

1. Spin up an empty 2.0 instance by following one of our :ref:`deployment
guides <ref_guide_deployment>`. These guides have been updated to 2.0. Keep
the DSN of the newly created instance handy.

2. Take your application offline, then dump your v1.x database with the CLI

   .. code-block:: bash

     $ edgedb dump --dsn <old dsn> --all my_database.dump/

   This will dump the schema and contents of your current database to a file
   on your local disk called ``my_database.dump``. The file name isn't
   important.

3. Restore the empty v2.x instance from the dump

   .. code-block:: bash

     $ edgedb restore --all my_database.dump/ --dsn <new dsn>

   Once the restore is complete, update your application to connect to the new
   instance.

This process will involve some downtime, specifically during steps 2 and 3. We
are working on an in-place upgrade workflow that will reduce the amount of
downtime involved and avoid the need to spin up a new instance. We'll publish
that soon; join the Discord for updates. Though for most applications the
dump-and-restore workflow will be simpler and less error-prone.


Client libraries
----------------

We've released new versions of our JavaScript and Python client libraries that
support all 2.0 features and implement the updated protocol. These versions
are backwards compatible with v1.x instances, so we encourage all users to
upgrade.

.. list-table::

  * - :ref:`TypeScript/JS <edgedb-js-intro>`
    - ``edgedb@0.21.0``
  * - :ref:`Python <edgedb-python-intro>`
    - ``edgedb@0.24.0``
  * - `Golang <https://www.edgedb.com/docs/clients/go/index>`_
    - ``edgedb@0.12.0``
  * - `Rust <https://github.com/edgedb/edgedb-rust>`_
    - ``edgedb-tokio@0.3.0``
  * - `.NET <https://github.com/quinchs/EdgeDB.Net>`_ (community-maintained)
    - ``EdgeDB.Net.Driver@0.3.0``
  * - `Elixir <https://github.com/nsidnev/edgedb-elixir>`_
      (community-maintained)
    - ``edgedb@0.4.0``

New features
============

Integrated admin UI
-------------------

All v2 instances ship with a built-in rich admin GUI. Access it by running
``edgedb ui`` inside any :ref:`EdgeDB project <ref_guide_using_projects>`, or
specify a local instance name with ``edgedb ui -I my_inst``. The
command opens the instance's admin UI using the default system browser.

The current iteration of the GUI has

- a data browser and editor
- a REPL for writing and executing EdgeQL queries
- a schema introspection tool with text-based and graphical visualizations of
  the instance's current schema

.. image:: images/v2_ui.jpg
    :width: 100%


Analytical queries with ``GROUP``
---------------------------------

The new :ref:`GROUP <ref_eql_group>` expression can be used to partition
and aggregate data. The output of ``GROUP`` are :ref:`free objects
<ref_eql_select_free_objects>` representing each group, including the
grouping, the grouping *key*, and the set of elements.

.. code-block:: edgeql-repl

  db> group Movie { title } by .release_year;
  {
    {
      key: {release_year: 2017},
      grouping: {'release_year'},
      elements: {
        default::Movie {title: 'Guardians of the Galaxy Vol. 2'},
        default::Movie {title: 'Spider-Man: Homecoming'},
        default::Movie {title: 'Thor: Ragnarok'},
      },
    },
    {
      key: {release_year: 2013},
      grouping: {'release_year'},
      elements: {
        default::Movie {title: 'Iron Man 3'},
        default::Movie {title: 'Thor: The Dark World'},
      },
    },
    ...
  }

Browse the :ref:`docs <ref_eql_group>` for more details and examples, or refer
to the original `RFC 1009 <group_>`_.


Global variables
----------------

Your schema can now contain :ref:`global variables <ref_datamodel_globals>`.
These are contextual variables that are provided by the client and can be
referenced in your queries and schema.

.. code-block:: sdl

  global current_user -> uuid;

.. code-block:: edgeql

  select User filter .id = global current_user;

Client libraries have been updated to provide method for attaching global
variables to a ``Client`` instance; these values are sent along with all
queries originating from that ``Client``.

.. tabs::

  .. code-tab:: typescript

    import {createClient} from 'edgedb';

    const client = createClient().withGlobals({
      current_user: '2141a5b4-5634-4ccc-b835-437863534c51',
    });

    await client.query(`select global current_user;`);

  .. code-tab:: python

    from edgedb import create_client

    client = create_client().with_globals({
        'current_user': '580cc652-8ab8-4a20-8db9-4c79a4b1fd81'
    })

    result = client.query("""
        select global current_user;
    """)

  .. code-tab:: go

    package main

    import (
      "context"
      "fmt"
      "log"

      "github.com/edgedb/edgedb-go"
    )

    func main() {
      ctx := context.Background()
      client, err := edgedb.CreateClient(ctx, edgedb.Options{})
      if err != nil {
        log.Fatal(err)
      }
      defer client.Close()

      id, err := edgedb.ParseUUID("2141a5b4-5634-4ccc-b835-437863534c51")
      if err != nil {
        log.Fatal(err)
      }

      var result edgedb.UUID
      err = client.
        WithGlobals(map[string]interface{}{"current_user": id}).
        QuerySingle(ctx, "SELECT global current_user;", &result)
      if err != nil {
        log.Fatal(err)
      }

      fmt.Println(result)
    }



Globals are primarily intended as an enabling mechanism for object-level
security.

Object-level security
---------------------

Object types can now be augmented with object-level access policies. When
combined with global variables, access policies can be used to
push authorization logic into the database.

.. code-block:: sdl

  global current_user -> uuid;

  type User {
    required property email -> str { constraint exclusive; };
  }

  type BlogPost {
    required property title -> str;
    link author -> User;
    access policy own_posts allow all using (
      .author.id ?= global current_user
    )
  }

Refer to :ref:`the docs <ref_datamodel_access_policies>` or `RFC 1011
<acls_>`_ for full details.


Range types
-----------

EdgeDB now supports :ref:`range types <ref_std_range>` representing intervals
of values.

.. code-block:: edgeql-repl

  db> select range(1, 10);
  {range(1, 10, inc_lower := true, inc_upper := false)}
  db> select range_unpack(range(1, 10))
  {1, 2, 3, 4, 5, 6, 7, 8, 9}

The ``cal::date_duration`` type
-------------------------------

This release also introduces a new datatype :eql:type:`cal::date_duration` to
represent a span of *months/days*. It is nearly equivalent to the existing
:eql:type:`cal::relative_duration` but cannot represent sub-day durations.

This type is primarily intended to simplify :eql:type:`cal::local_date` logic.

.. code-block::

  db> select <cal::local_date>'2022-06-25' +
  ...   <cal::date_duration>'5 days';
  {<cal::local_date>'2022-06-30'}
  db> select <cal::local_date>'2022-06-30' -
  ...   <cal::local_date>'2022-06-25';
  {<cal::date_duration>'P5D'}

Source deletion policies
------------------------

Add deletion cascade functionality with ``on source delete``.

.. code-block:: sdl

  type BlogPost {
    property title -> str;
  }

  type Person {
    multi link posts -> BlogPost {
      on source delete delete target;
    }
  }

Under this policy, deleting a ``User`` will unconditionally delete its
``posts`` as well.

To avoid deleting a ``Post`` that is linked to by other schema entities,
append ``if orphan``.

.. code-block:: sdl-diff

    type Person {
      multi link posts -> BlogPost {
  -     on source delete delete target;
  +     on source delete delete target if orphan;
      }
    }



Additional changes
==================

EdgeQL
------

* Support additional operations on local date and time types,
  including :eql:func:`duration_get`,
  :eql:func:`cal::duration_normalize_hours`, and
  :eql:func:`cal::duration_normalize_days`. Per `RFC 1013 <dates_>`_.


* Support user-provided values for the ``id`` property when inserting objects
  (:edb:gh:`#3895`). This can be useful when migrating data from
  an existing database.

  .. code-block::

    insert User {
      id := <uuid>"5abf67cc-9f9f-4bbc-b009-d117d463a12e",
      email := "jayz@example.com"
    }

* Support partial constraints and indexes (:edb:gh:`#3949`,
  :ref:`docs <ref_datamodel_constraints_partial>`).

* Add the new :eql:func:`json_set` function (:edb:gh:`#4118`).


Server
------

* Support socket activation to reduce memory footprint on developer
  machines (:edb:gh:`#3899`).

* Introduce edgedb+http, a which tunnels the binary protocol over HTTP
  using JWT for authentication (:edb:gh:`#3979`).

* Support using JWT to authenticate to local instances (:edb:gh:`#3991`).


Bug fixes
---------

* Generate unique ``id`` fields for each free shape object,
  and don't use an actual in-database object to represent it,
  and make multiplicity inference understand free shapes better
  (:edb:gh:`#3631`, :edb:gh:`#3633`, :edb:gh:`#3634`).

* Fail if local Postgres cluster fails to start.

* Add ``cfg::memory`` to base types descriptor IDs table (:edb:gh:`#3882`).

* Fix a cross-type exclusive constraint bug that could allow exclusive
  constraints to be violated in some complex type hierarchies
  (:edb:gh:`#3887`).

* Fix issue where server might attempt to acquire one more connection
  than it is configured to permit (:edb:gh:`#3901`).

* Fix use of ``assert_exists`` on properties that are being directly output
  (:edb:gh:`#3911`).

* Fix a scope leakage that could cause a link referenced inside a computable
  to improperly correlate with something outside the computable
  (:edb:gh:`#3912`).

* Fix a number of issues with the floordiv (``//``) and modulus (``%``)
  operators where we could return incorrect values or produce spurious
  errors, especially on very large values (:edb:gh:`#3909`).

* Allow adding annotations to ``abstract annotation`` definitions
  (:edb:gh:`#3929`).

* Expose ``body`` and ``language`` fields on ``schema::Function``
  (:edb:gh:`#3944`).

* Make indexes extend from ``schema::InheritingObject`` (:edb:gh:`#3942`).

* Fix some mis-compilations of nested shapes inside calls to functions
  like ``assert_single`` (:edb:gh:`#3927`).

* Fix ``SET TYPE`` on properties with default values (:edb:gh:`#3954`).

* Fix ``describe``/``populate``/``describe`` sequence (:edb:gh:`#3959`).

* Upgrade many casts and functions from "Stable" to "Immutable"
  (:edb:gh:`#3975`).

* Fix link properties in type filtered shape links (:edb:gh:`#3987`).

* Allow DML statements in free shapes (:edb:gh:`#4002`).

* Allow customizing assertion messages in ``assert_exists`` and friends
  (:edb:gh:`#4019`).

Protocol overhaul
-----------------

* A new version of the protocol---version 1.0---has been introduced.
  It eliminates all server state associated with connections that
  do not use transactions.

* Support passing parameters to and returning values from multi-statement
  scripts.

2.1
===
* Fix global defaults with nontrivial computation
  (:edb:gh:`#4182`)

* Fix migration that removes policy using clause
  (:edb:gh:`#4183`)

* Support ELSE-less UNLESS CONFLICT on explicit id INSERT
  (:edb:gh:`#4185`)

* Don't create constraints on derived views when adding a pointer to a type
  (:edb:gh:`#4187`)

* Fix a bunch of missing source contexts in declarative
  (:edb:gh:`#4188`)

* Fix an ISE when a computed link is directly a property reference
  (:edb:gh:`#4193`)

* Fix an ISE when using an empty shape in some contexts
  (:edb:gh:`#4194`)

* Fix a number of error messages involving collection types in schemas
  (:edb:gh:`#4195`)

* Avoid doing semi-joins after a sequence of single links
  (:edb:gh:`#4196`)

* Make range() properly strict in its non-optional arguments
  (:edb:gh:`#4207`)

* Allow multiple FDs per socket in activation
  (:edb:gh:`#4189`)

* Add SCRAM authentication over HTTP
  (:edb:gh:`#4197`)

* Always arm auto-shutdown timer when it's greater than zero
  (:edb:gh:`#4214`)

* Fix json -> array<json> cast of '[]'
  (:edb:gh:`#4217`)

2.2
===
* Support UNLESS CONFLICT ON for pointers with DML in them
  (:edb:gh:`#4357`)

* Fix cardinality in CommandDataDescription
  (:edb:gh:`#4347`)

* Prevent access rule hidden ids from leaking when accessed directly
  (:edb:gh:`#4339`)

* Better messages for required links hidden by policies
  (:edb:gh:`#4338`)

* Fix access policies on DELETE of a UNION type
  (:edb:gh:`#4337`)

* Strip out all views from DML subjects when computing what tables to use
  (:edb:gh:`#4336`, :edb:gh:`#4333`)

* Fix interaction between access policies and omitted fields in insert
  (:edb:gh:`#4332`, :edb:gh:`#4219`)

* Fix a tracer issue with reverse links and IS
  (:edb:gh:`#4331`)

* Don't include union types in link triggers
  (:edb:gh:`#4329`, :edb:gh:`#4320`)

  If you encounter this issue, after upgrading to a version with this
  patch, it can be fixed by doing a dump/restore or by adding a new link
  to the affected type.

* Require ON for constraints on objects
  (:edb:gh:`#4324`, :edb:gh:`#4268`)

* Fix interaction between DETACHED and aliases/globals
  (:edb:gh:`#4321`, :edb:gh:`#4258`)

* Disable access policy rewrite when compiling constraints
  (:edb:gh:`#4248`, :edb:gh:`#4245`)

* Expose ``--admin-ui`` as an environment variable and document it
  (:edb:gh:`#4255`)

* Prevent ``HttpProtocol.close`` from crashing on closed client connection
  (:edb:gh:`#4238`)

* Fix permitted JSON null in nested array cast
  (:edb:gh:`#4221`)

* Fix ``range_unpack`` boundary bug.

  The ``range_unpack`` function was incorrectly excluding values close to
  boundary, especially when the boundary was not itself inclusive.
  (:edb:gh:`#4282`)

* UI: Allow selection of read-only properties in data editor
  (:edb:gh:`edgedb/edgedb-ui/#65`)

* UI: Hide subtype columns in data editor by default;
  add a toggle to show them.
  (:edb:gh:`edgedb/edgedb-ui/#43`)

* UI: Add "create example database" to the database selection
  screen.
  (:edb:gh:`edgedb/edgedb-ui/#61`)

* UI: Fix navigation from being reset on switching
  the UI panes.
  (:edb:gh:`edgedb/edgedb-ui/#61`)

* UI: Fix rendering of range types.
  (:edb:gh:`edgedb/edgedb-ui/#61`)

* UI: Fix the data editor UI to render types that have
  some properties or links masked by an access policy.
  (:edb:gh:`edgedb/edgedb-ui/#61`)

* UI: Implement login page for remote instances.
  (:edb:gh:`edgedb/edgedb-ui/#40`)

2.3
===

* Clarify error message when UI is not enabled
  (:edb:gh:`#4256`)

* Fix an issue with inherited computeds
  (:edb:gh:`#4371`)

* Fix bug in diamond pattern constraint inheritance
  (:edb:gh:`#4379`)

* When finding common parent for arrays, never use expr alias arrays
  (:edb:gh:`#4080`)

* Properly quote numeric names when in codegen
  (:edb:gh:`#4344`)

* Fix computed global scoping behavior
  (:edb:gh:`#4388`)

* Fix DDL performance issues on databases with lots of data
  (:edb:gh:`#4401`)

* Fix potentially missed constraints on DML
  (:edb:gh:`#4410`)

* Fix slicing with an empty set
  (:edb:gh:`#4404`)

* Fix slicing array of tuples
  (:edb:gh:`#4391`)

* Don't apply access policies when compiling indexes
  (:edb:gh:`#4420`)

* Fix slicing of tuple arrays with null inputs
  (:edb:gh:`#4421`)

* Propagate database creation and deletion events to adjacent servers
  (:edb:gh:`#4415`)

2.4
===

* Fix database initialization on hosted environments like Heroku.
  (:edb:gh:`#4432`)

* Prevent spurious errors when using backlinks on types that have
  properties with the same name but different types
  (:edb:gh:`#4443`)

* Fix some spurious errors when removing a link from the schema.
  (:edb:gh:`#4451`)

* For query_single, only check that the *last* query in a script is single.
  (:edb:gh:`#4453`)

* Catch when POPULATE MIGRATION generates incorrect DDL. This should prevent
  bugs where the schema can get into wedged states.
  (:edb:gh:`#4484`)

* workflows: Publish multiarch Docker images
  (:edb:gh:`#4486`)

* Make unused param insertion in the sql compiler more reliable
  (:edb:gh:`#4497`)

* Properly propagate creation and deletion of extensions

* Fix potential exclusive constraint violations when doing an UPDATE
  on a union
  (:edb:gh:`#4507`)

* Don't lose type from inheritance views when rebasing
  (:edb:gh:`#4509`)

* Make object type descriptor ids be derived from type name
  (:edb:gh:`#4503`)

* Check for invalid arrays arguments at the protocol level
  (:edb:gh:`#4511`)

* Fix SET REQUIRED on newly created properties with alias subtypes
  (:edb:gh:`#4513`)

* Make newly created link properties get added to the relevant alias types
  (:edb:gh:`#4512`)

* Fix handling of link properties named ``id``
  (:edb:gh:`#4514`)

* Disallow queries using conflict machinery on a link property. This
  prevents certain potential exclusive constraint violations that were
  not handled correctly.
  (:edb:gh:`#4515`)

* Fix performing multiple deletions at once in the UI
  (:edb:gh:`#4523`)

* Fix casting empty sets to built in enum types
  (:edb:gh:`#4532`)

* Produce better error messages when using ``enum`` incorrectly
  (:edb:gh:`#4527`)

* Make ``'\b'`` produce the correct value in string and bytes literals
  (:edb:gh:`#4535`)

2.5
===

* Properly infer cardinality of empty array as ONE
  (:edb:gh:`#4533`)

* Fix several issues that manifest when using GROUP BY
  (:edb:gh:`#4549`, :edb:gh:`#4439`)

* Fix migration scripts when combined with access policies
  (:edb:gh:`#4553`)

* Fix failure when a ``ALTER ... EXTENDING`` doesn't change the
  set of ancestors
  (:edb:gh:`#4554`)

* Fix ``UNLESS CONFLICT ON`` for a not-inserted property
  (:edb:gh:`#4556`)

* Fix access policies that use shapes internally
  (:edb:gh:`#4555`)

* Allow overloading ``__type__`` with a computed in shapes
  (:edb:gh:`#4557`)

2.6
===

Nonrecursive access policies and future behaviors
-------------------------------------------------

Starting with EdgeDB 3.0, access policy restrictions will **not** be applied
while evaluating other access policy expressions (:edb:gh:`#4574`).

It is possible (and recommended) to enable this :ref:`future
<ref_eql_sdl_future>` behavior in EdgeDB 2.6 by adding the
following to the schema: ``using future nonrecursive_access_policies;``

For more details, see :ref:`the docs <nonrecursive>`.

To enable opting in to this behavior, 2.6 adds a general mechanism
to opt into :ref:`future <ref_eql_sdl_future>` behavior changes
(:edb:gh:`#4574`, :edb:gh:`#4606`).

Other changes
-------------

* Fix passing zero dimensional array as arguments. This was a regression
  introduced in 2.4, and affected passing empty arrays from the the Rust
  bindings.
  (:edb:gh:`#4511`)

* Require that constraint expressions be immutable
  (:edb:gh:`#4593`)

* Only permit valid UUID-generation functions to be made the default value
  for ``id``
  (:edb:gh:`#4616`)

* UI: New mechanism for copying data in REPL and in Data Editor. Hover over
  a data line and click the context "COPY" button.

  .. image:: images/v2_ui_copy.jpg
    :width: 100%

* UI: "Disable Access Policies" and "Persist Query" options in REPL remember
  their state between page refreshes.

* UI: Basic autocomplete now works for ``INSERT``, ``UPDATE``, and ``DELETE``
  queries.

2.7
===

* Improve error messages when compiling pointer default
  (:edb:gh:`#4624`)

* Fix using WITH-bound DML from an UPDATE in an ELSE clause
  (:edb:gh:`#4641`)

* Allow WITH MODULE in ddl in CREATE MIGRATION
  (:edb:gh:`#4668`)

* Fix some broken casts from object types to JSON
  (:edb:gh:`#4663`)

* Fix putting a statement as the body of an access policy
  (:edb:gh:`#4667`)

* Loosen the rules on when we produce a "would change the
  interpretation" error. It is not only produced when a link is being
  used, not a property. (:edb:gh:`#4643`)

* Fix certain errors involving default values in access policies
  (:edb:gh:`#4679`)

* Avoid ISE when pickling DynamicRangeVar
  (:edb:gh:`#4681`)

* Fix ``max_ex_value`` constraint.
  (:edb:gh:`#4671`)

* Fix SET GLOBAL capabilities to no longer break in the CLI.
  (:edb:gh:`#4688`)

* Fix links to ``schema::ObjectType`` breaking DROP TYPE.  If you have
  a link in your schema to ``schema::ObjectType`` or one of its
  ancestors and you encounter internal server errors when trying to
  drop a type, it should be possible to repair your database by
  creating and then deleting a new link to ``schema::ObjectType``.
  (:edb:gh:`#4670`)

* Don't insert unnecessary ``assert_exists`` calls on required links
  inside access policies bodies in some cases.
  (:edb:gh:`#4695`)

2.8
===

* Fix DML access policies that use shapes internally
  (:edb:gh:`#4589`)

* Give a proper error message creating a migration with a USING that has DML
  (:edb:gh:`#4707`)

* Don't incorrectly evaluate DML access policies when elements are also DML.
  This fixes some cases in which policies would pass incorrectly.
  (:edb:gh:`#4745`)

* Fix direct use of ``__subject__`` from insert access policies
  (:edb:gh:`#4752`)

* Produce an error message on casts to and literal references of enum types
  from indexes and constraints. Currently we generate an internal server
  error. A real fix unfortunately must wait for 3.0 for technical reasons.
  (:edb:gh:`#4754`)

* Only apply filter cardinality inference to unique sets
  (:edb:gh:`#4763`)

* Fix changing a link to non-computed and single at the same time
  (:edb:gh:`#4764`)

* Fix error message for function calls on derived types
  (:edb:gh:`#4757`)

* Fix deleting certain complex aliases
  (:edb:gh:`#4777`)

* Fix link properties on inherited backlinks
  (:edb:gh:`#4788`)

* Fix using array/string/bytes/json subscripting inside of indexes and
  constraints.
  (:edb:gh:`#4760`)

* Fix apparent startup hangs due to a lock fd leaking into postgres
  (:edb:gh:`#4797`)

* Fix some migrations with tricky constraint/computed interactions
  (:edb:gh:`#4794`)

2.9
===

* Fix broken DROPs of pointers in some multiple-inheritance situations
  (:edb:gh:`#4809`)

* Properly execute function calls in UPDATE once per object
  (:edb:gh:`#4810`)

* Fix accessing tuple elements on link properties
  (:edb:gh:`#4811`)

* Fix ``assert_exists()`` not firing on some tuple values
  (:edb:gh:`#4812`)

* Fix GROUP on the result of enumerate
  (:edb:gh:`#4813`)

* Support more env vars in args.py, standardize docs
  (:edb:gh:`#4387`)

* Fix computed properties that just copy id
  (:edb:gh:`#4807`)

* Fix backlinks on derived union types
  (:edb:gh:`#4818`)

* Fix references to the enclosing type in schema-defined computeds
  (:edb:gh:`#4826`)

* UI: Fix regression introduced in 2.8 when editing empty string
  fields in data explorer

* UI: Improvements to handling of union link targets in schema and
  data explorer views

* UI: Fix loading indicators on tabs

2.10
====

* Fix mismatch in session state after a ``ROLLBACK``

* Fix ISE when doing set default on an abstract pointer
  (:edb:gh:`#4843`)

* Fix accesses to ``__type__`` from insert access policies
  (:edb:gh:`#4865`)

* Properly forbid aggregation in index expressions
  (:edb:gh:`#4869`)

* Fix ``grouping`` field when grouping by one key or nothing
  (:edb:gh:`#4906`)

* Fix two issues with mutation in free objects
  (:edb:gh:`#4902`)

* Only allow type names as the subject of an insert. (Previously dotted paths
  were allowed, with nonsensical behavior.)
  (:edb:gh:`#4922`)

* Fix array arguments in HTTP interface
  (:edb:gh:`#4956`)

* Support multi properties in ``UNLESS CONFLICT ON``
  (:edb:gh:`#4955`)

* Fix polymorphic type tests on result of update
  (:edb:gh:`#4954`)

* Optimize trivial ``WITH`` -bound ``GROUP`` uses
  (:edb:gh:`#4978`)

* Fix a category of confusing scoping related bugs in access policies
  (:edb:gh:`#4994`)

* Get rid of the "unused alias definition" error.
  (:edb:gh:`#4819`)

* Support mutation in ``USING`` expressions when changing a link to
  ``required`` or to ``single`` during a migration
  (:edb:gh:`#4873`)

* Fix custom function calls on the HTTP interface
  (:edb:gh:`#4998`)

* Avoid infinite recursion in some do-nothing intersection cases
  (:edb:gh:`#5007`)

* Don't mangle cast error messages when the cast value contains a type name
  (:edb:gh:`#5008`)

* Allow JWT token auth in binary protocol
  (:edb:gh:`#4830`)

* Use prepared statement cache in EdgeQL script execution
  (:edb:gh:`#4931`)

* Fix non-transactional commands like ``DROP DATABASE`` when using
  Postgres 14.7
  (:edb:gh:`#5026`)

* Update packaged Postgres to 14.7

* Fix ``set single`` on required properties
  (:edb:gh:`#5031`)

* Fix a ISE when using assert_exists and linkprops using query builder
  (:edb:gh:`#4961`)

2.11
====

* Fix adding a link property with a default value to an existing link
  (a regression in 2.10)
  (:edb:gh:`#5061`)

2.12
====

* Fix GROUP regression with some query-builder queries
  (a regression in 2.10)
  (:edb:gh:`#5073`)

2.13
====
* Implement a MIGRATION REWRITE system. This provides a mechanism for
  safely rewriting the migration history of a database while ensuring
  that the new history produces the same result as the old
  history. CLI tooling to take advantage of this feature is coming
  soon.
  (:edb:gh:`#4585`)

* Fix DigitalOcean support: allow its custom error in bootstrap
  (:edb:gh:`#5139`)

* Add a hint to the error message about link targets.
  (:edb:gh:`#5131`)

* Infer cardinality of ``required multi`` pointers as AT_LEAST_ONE
  (:edb:gh:`#5180`)

* Fix dump/restore of migrations with messages on them
  (:edb:gh:`#5171`)

* Fix interaction of link properties and ``assert_exists`` and similar
  (:edb:gh:`#5182`)

* Make ``assert_single`` and similar not lose track of values updated
  in an ``UPDATE`` in their argument.
  (:edb:gh:`#5088`)

* Add a test for assert_exists+assert_single+UPDATE
  (:edb:gh:`#5242`)

* Add support for new JWT layout
  (:edb:gh:`#5197`)

* Fix uses of volatile expressions in update write access policies
  (:edb:gh:`#5256`)

* Allow globals to be used in defaults
  (:edb:gh:`#5268`)

* Fix errmessage interpolation to not produce an internal server error on
  braces in a message. Allow ``{{`` and ``}}`` to be used to escape braces.
  (:edb:gh:`#5295`)

2.14
====

Schema repair on upgrades
-------------------------

Previously, certain bug fixes and changes (such as the fix to
cardinality inferenced of ``required multi`` pointers released in 2.13
(:edb:gh:`#5180`)), could cause schemas to enter an inconsistent state
from which many migrations were not possible.

The cause of this problem is that an incorrectly inferred value (such
as the cardinality of a computed property) may have been computed and
stored in a previous version. When a newer version is used, there will
be a mismatch between the correctly inferred value on the new version,
and the incorrectly stored value in the database's schema.

The most straightforward way to fix such problems was to perform a dump
and then a restore.

To fix this, we have introduced a schema repair mechanism that will
run when upgrading a database to 2.14. This repair mechanism will fix
any incorrectly inferred fields that are stored in the schema.

One particular hazard in this, however, is that the repair is not
easily reversible if you need to downgrade to an earlier version.
**We recommend performing a dump before upgrading to 2.14.**

These changes were made in (:edb:gh:`#5337`); more discussion of the issue
can be found in (:edb:gh:`#5321`).

Other changes
-------------

* Correctly display constraint errors on ``id``
  (:edb:gh:`#5344`)

* Fix adding certain computed links to a type with an alias
  (:edb:gh:`#5329`)

2.15
====
* In multi-server instances, properly reload schema after a restore
  (:edb:gh:`#5463`)

* Fix several bugs synchronizing configuration state

* Fix dropping a pointer's constraint and making it computed at the same time
  (:edb:gh:`#5411`)

* Don't claim that making a pointer computed is data-safe
  (:edb:gh:`#5412`)

* Prohibit NUL character in query source
  (:edb:gh:`#5414`)

* Fix migration that delete an link alias computed in a parent and child
  (:edb:gh:`#5428`)

* Fix GraphQL updates for multi links.
  (:edb:gh:`#4260`)

* Fix altering enum that is used in a tuple
  (:edb:gh:`#5445`)

* Fix changing cardinality of properties on types used in unions
  (:edb:gh:`#5457`)

* Enable GraphQL support for type unions.

* Fix making pointer non-computed and giving it an abstract base at the
  same time
  (:edb:gh:`#5458`)

* Make json casts of object arrays not include extra fields
  (:edb:gh:`#5484`)

* Make coalesce infer a union type
  (:edb:gh:`#5472`)

2.16
====
* Fix ISEs involving single link with only computed link properties
  (:eql:gh:`#5499`)

* Don't ISE on free shape in insert
  (:eql:gh:`#5438`)

* Always set cardinality of derived ``__tname__`` properties
  (:eql:gh:`#5508`)

* Work around mysterious postgres crashes on Digital Ocean
  (:eql:gh:`#5505`)

* Make reestablishing system postgres connections more resilient
  (:eql:gh:`#5511`)

* Fix graphql queries made against a freshly started server
  (:eql:gh:`#5456`)

* Support dumping databases with ``std::duration`` config vals
  (:eql:gh:`#5528`)

* Fix ISE for TypeExprs in function returns
  (:eql:gh:`#5540`)

* Support comparisons on durations in static eval

* Fix create database conflicts with name in schema
  (:eql:gh:`#5515`)

* Fix range and bytes output in json-lines/json-pretty mode
  (:eql:gh:`#5572`)

* Include source locations in more scoping error messages
  (:eql:gh:`#5573`)

* Fix an optional scoping bug with important access policy implications
  (:eql:gh:`#5575`)

.. lint-off

.. _group:
    https://github.com/edgedb/rfcs/blob/master/text/1009-group.rst
.. _globals:
    https://github.com/edgedb/rfcs/blob/master/text/1010-global-vars.rst
.. _acls:
    https://github.com/edgedb/rfcs/blob/master/text/1011-object-level-security.rst
.. _range:
    https://github.com/edgedb/rfcs/blob/master/text/1012-range-types.rst
.. _dates:
    https://github.com/edgedb/rfcs/blob/master/text/1013-datetime-arithmetic.rst
.. _v2anno:
    https://www.edgedb.com/blog/edgedb-2-0

.. lint-on


.. _v2anno:
    https://www.edgedb.com/blog/edgedb-2-0
