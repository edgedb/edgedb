.. _ref_ai_provider_for_vercel_sdk:

======================
Vercel AI SDK provider
======================

:edb-alt-title: EdgeDB provider for Vercel AI SDK

The EdgeDB AI provider contains language model support for the EdgeDB chat API 
and embedding model support for the EdgeDB embeddings API.

Setup
=====

The AI provider is available in the ``@edgedb/vercel-ai-provider`` module. You can install it with:

.. tabs::

  .. code-tab:: npm
    
    npm i @edgedb/vercel-ai-provider 

  .. code-tab:: pnpm

    pnpm add @edgedb/vercel-ai-provider 

  .. code-tab:: yarn

    yarn add @edgedb/vercel-ai-provider 

  .. code-tab:: bun 

    bun add @edgedb/vercel-ai-provider 

Provider instance
=================

You can import the default provider instance ``edgedb`` from ``@edgedb/vercel-ai-provider``:

.. code-block:: typescript

  import { edgedb } from '@edgedb/vercel-ai-provider';

The default instance uses variables from the ``.env`` files during EdgeDB client creation. 

If you need a customized setup, you can import ``createEdgeDB`` from ``@edgedb/vercel-ai-provider`` and create a provider instance with your settings:

.. code-block:: typescript

  import { createClient } from "edgedb";
  import { createEdgeDB } from '@edgedb/vercel-ai-provider';

  const client = await createClient();

  const edgedb = createEdgeDB(client, options: {
    // custom settings
  });

You can use the following optional settings to customize the EdgeDB provider instance:

- **headers** *Record<string,string>*

Custom headers to include in the requests.

Language models
===============

You can create models that call some of the supported `chat APIs <https://docs.edgedb.com/ai/supported_llm_models>`__ using a provider instance. The first argument is the model. The second argument is a configuration object where providing context is mandatory. 

.. code-block:: typescript

  const context = {
    query: "Astronomy",
  };

  const textModel = (await edgedb).languageModel("gpt-4-turbo", {
    context
  });

Besides context object additional settings that are not part of the `standard call settings <https://sdk.vercel.ai/docs/ai-sdk-core/settings>`__ can be provided. Here is the full list of configuration settings:

EdgeDB AI configuration settings:

- **context**: *QueryContext*

- **prompt**?: *Prompt*

Can be used only with Mistral models:

- **safePrompt**?: *boolean*

  Whether to inject a safety prompt before all conversations.
  Defaults to ``false``.

Can be used only with OpenAI models:

- **echo**?: *boolean*

  Echo back the prompt in addition to the completion.

- **logitBias**?: *Record<number, number>*

  Modify the likelihood of specified tokens appearing in the completion.

  Accepts a JSON object that maps tokens (specified by their token ID in
  the GPT tokenizer) to an associated bias value from -100 to 100. You
  can use this tokenizer tool to convert text to token IDs. Mathematically,
  the bias is added to the logits generated by the model prior to sampling.
  The exact effect will vary per model, but values between -1 and 1 should
  decrease or increase likelihood of selection; values like -100 or 100
  should result in a ban or exclusive selection of the relevant token.

  As an example, you can pass {"50256": -100} to prevent the ``endoftext``
  token from being generated.

- **logprobs**?: *boolean | number*

  Return the log probabilities of the tokens. Including logprobs will increase
  the response size and can slow down response times. However, it can
  be useful to better understand how the model is behaving.

  Setting to true will return the log probabilities of the tokens that
  were generated.

  Setting to a number will return the log probabilities of the top n
  tokens that were generated.
  
- **user**?: *string*
  
  A unique identifier representing your end-user, which can help OpenAI to
  monitor and detect abuse.

Ensure that the model you are using supports the provided settings by referring to the documentation of the LLM provider for that specific model.

Example
-------

You can use EdgeDB Ai to generate text with the ``generateText`` function:

.. code-block:: typescript

  import { generateText } from "ai";
  import { edgedb } from "@edgedb/vercel-ai-provider";

  const model = (await edgedb).languageModel("gpt-4-turbo", {
    context: { query: "Astronomy" },
  });

  const { text } = generateText({
    model,
    prompt: "What color is the sky on Mars?",
  });

EdgeDB AI can also be used with Vercel SDK's ``streamText``, ``generateObject``, ``streamObject`` and ``streamUI`` functions.

Embedding models
================

You can create embedding models using the .textEmbeddingModel() factory method:

.. code-block:: typescript

  const model = (await edgedb).textEmbeddingModel("text-embedding-3-small");

Alongside the model you can also provide a settings object:

- **maxEmbeddingsPerCall**?: *number*
  
  Override the maximum number of embeddings per call.

- **supportsParallelCalls**?: *boolean*;

  Override the parallelism of embedding calls.

Can be used only with OpenAI models:

- **dimensions**?: *number*

  The number of dimensions the resulting output embeddings should have.
  Only supported in text-embedding-3 and later models.

- **user**?: *string*
  
  A unique identifier representing your end-user, which can help OpenAI to
  monitor and detect abuse.

Ensure that the model you are using supports the provided settings by referring to the documentation of the LLM provider for that specific model.

  












