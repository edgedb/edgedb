diff --git a/edb/buildmeta.py b/edb/buildmeta.py
index 52d9f700d..2297151e7 100644
--- a/edb/buildmeta.py
+++ b/edb/buildmeta.py
@@ -68,6 +68,12 @@ class MetadataError(Exception):
     pass
 
 
+# HACK: Put this down here so it overrides the above version without
+# merge conflicting with them.
+EDGEDB_CATALOG_VERSION = 2030_01_01_00_00
+EDGEDB_MAJOR_VERSION = 1000
+
+
 class BackendVersion(NamedTuple):
     major: int
     minor: int
diff --git a/edb/edgeql/ast.py b/edb/edgeql/ast.py
index 53f317d26..ce83fb341 100644
--- a/edb/edgeql/ast.py
+++ b/edb/edgeql/ast.py
@@ -1134,6 +1134,23 @@ class SetGlobalType(SetField):
     reset_value: bool = False
 
 
+class BlobalCommand(ObjectDDL):
+
+    __abstract_node__ = True
+
+
+class CreateBlobal(CreateObject, BlobalCommand):
+    pass
+
+
+class AlterBlobal(AlterObject, BlobalCommand):
+    pass
+
+
+class DropBlobal(DropObject, BlobalCommand):
+    pass
+
+
 class LinkCommand(ObjectDDL):
 
     __abstract_node__ = True
diff --git a/edb/edgeql/codegen.py b/edb/edgeql/codegen.py
index 5e82472ff..d06a8cd72 100644
--- a/edb/edgeql/codegen.py
+++ b/edb/edgeql/codegen.py
@@ -2448,6 +2448,12 @@ class EdgeQLSourceGenerator(codegen.SourceGenerator):
     def visit_DropGlobal(self, node: qlast.DropGlobal) -> None:
         self._visit_DropObject(node, 'GLOBAL')
 
+    def visit_CreateBlobal(self, node: qlast.CreateGlobal) -> None:
+        self._visit_CreateObject(node, 'BLOBAL')
+
+    def visit_DropBlobal(self, node: qlast.DropGlobal) -> None:
+        self._visit_DropObject(node, 'BLOBAL')
+
     def visit_ConfigSet(self, node: qlast.ConfigSet) -> None:
         if node.scope == qltypes.ConfigScope.GLOBAL:
             self._write_keywords('SET GLOBAL ')
diff --git a/edb/edgeql/parser/grammar/ddl.py b/edb/edgeql/parser/grammar/ddl.py
index 72bbb77fa..5a59b25b8 100644
--- a/edb/edgeql/parser/grammar/ddl.py
+++ b/edb/edgeql/parser/grammar/ddl.py
@@ -246,6 +246,14 @@ class InnerDDLStmt(Nonterm):
     def reduce_DropGlobalStmt(self, *_):
         pass
 
+    @parsing.inline(0)
+    def reduce_CreateBlobalStmt(self, *_):
+        pass
+
+    @parsing.inline(0)
+    def reduce_DropBlobalStmt(self, *_):
+        pass
+
     @parsing.inline(0)
     def reduce_DropCastStmt(self, *_):
         pass
@@ -3565,6 +3573,38 @@ class DropGlobalStmt(Nonterm):
             name=kids[2].val
         )
 
+#
+# CREATE BLOBAL
+#
+
+
+commands_block(
+    'CreateBlobal',
+    SetFieldStmt,
+    CreateAnnotationValueStmt,
+)
+
+
+class CreateBlobalStmt(Nonterm):
+    def reduce_CreateBlobal(self, *kids):
+        """%reduce
+            CREATE BLOBAL NodeName
+            OptCreateBlobalCommandsBlock
+        """
+        self.val = qlast.CreateBlobal(
+            name=kids[2].val,
+            commands=kids[3].val,
+        )
+
+
+class DropBlobalStmt(Nonterm):
+    def reduce_DropBlobal(self, *kids):
+        r"""%reduce DROP BLOBAL NodeName"""
+        self.val = qlast.DropBlobal(
+            name=kids[2].val
+        )
+
+
 #
 # MIGRATIONS
 #
diff --git a/edb/lib/_testmode.edgeql b/edb/lib/_testmode.edgeql
index 0f0f1332c..ef977c8dd 100644
--- a/edb/lib/_testmode.edgeql
+++ b/edb/lib/_testmode.edgeql
@@ -214,6 +214,15 @@ create extension package _conf VERSION '1.0' {
 
 # std::_gen_series
 
+CREATE FUNCTION
+std::_upgrade_test(
+) -> std::str
+{
+    SET volatility := 'Immutable';
+    USING ('asdf');
+};
+
+
 CREATE FUNCTION
 std::_gen_series(
     `start`: std::int64,
diff --git a/edb/lib/schema.edgeql b/edb/lib/schema.edgeql
index ae5c70d5b..b7692b16c 100644
--- a/edb/lib/schema.edgeql
+++ b/edb/lib/schema.edgeql
@@ -526,9 +526,17 @@ CREATE TYPE schema::Global EXTENDING schema::AnnotationSubject {
 };
 
 
+CREATE TYPE schema::Blobal EXTENDING schema::AnnotationSubject {
+    CREATE PROPERTY required -> std::bool;
+};
+
+
 CREATE TYPE schema::Function
     EXTENDING schema::CallableObject, schema::VolatilitySubject
 {
+    CREATE PROPERTY test_field_a -> std::str;
+    CREATE PROPERTY test_nativecode_size -> std::int64;
+
     CREATE PROPERTY preserves_optionality -> std::bool {
         SET default := false;
     };
diff --git a/edb/pgsql/delta.py b/edb/pgsql/delta.py
index b447e6a4c..fc7ee4a74 100644
--- a/edb/pgsql/delta.py
+++ b/edb/pgsql/delta.py
@@ -748,6 +748,38 @@ class DeleteGlobal(
     pass
 
 
+class BlobalCommand(MetaCommand):
+    pass
+
+
+class CreateBlobal(
+    BlobalCommand,
+    adapts=s_globals.CreateBlobal,
+):
+    pass
+
+
+class RenameBlobal(
+    BlobalCommand,
+    adapts=s_globals.RenameBlobal,
+):
+    pass
+
+
+class AlterBlobal(
+    BlobalCommand,
+    adapts=s_globals.AlterBlobal,
+):
+    pass
+
+
+class DeleteBlobal(
+    BlobalCommand,
+    adapts=s_globals.DeleteBlobal,
+):
+    pass
+
+
 class AccessPolicyCommand(MetaCommand):
     pass
 
diff --git a/edb/schema/functions.py b/edb/schema/functions.py
index a8792324b..527b8c38f 100644
--- a/edb/schema/functions.py
+++ b/edb/schema/functions.py
@@ -1244,6 +1244,27 @@ class Function(
     data_safe=True,
 ):
 
+    ##
+    test_field_a = so.SchemaField(
+        str,
+        default=None,
+        compcoef=0.4,
+        allow_ddl_set=True,
+    )
+
+    test_field_b = so.SchemaField(
+        str,
+        default=None,
+        compcoef=0.4,
+        allow_ddl_set=True,
+    )
+
+    test_nativecode_size = so.SchemaField(
+        int,
+        default=None,
+    )
+    ##
+
     used_globals = so.SchemaField(
         so.ObjectSet[s_globals.Global],
         coerce=True, default=so.DEFAULT_CONSTRUCTOR,
@@ -1615,6 +1636,10 @@ class FunctionCommand(
                 nativecode.not_compiled()
             )
 
+        if self.has_attribute_value('nativecode'):
+            code = self.get_attribute_value('nativecode')
+            self.set_attribute_value('test_nativecode_size', len(code.text))
+
         # Resolving 'nativecode' has side effects on has_dml and
         # volatility, so force it to happen as part of
         # canonicalization of attributes.
diff --git a/edb/schema/globals.py b/edb/schema/globals.py
index 76ec833f4..460ea0a67 100644
--- a/edb/schema/globals.py
+++ b/edb/schema/globals.py
@@ -619,3 +619,60 @@ class DeleteGlobal(
     GlobalCommand,
 ):
     astnode = qlast.DropGlobal
+
+
+class Blobal(
+    so.QualifiedObject,
+    s_anno.AnnotationSubject,
+    qlkind=qltypes.SchemaObjectClass.GLOBAL,
+    data_safe=True,
+):
+
+    required = so.SchemaField(
+        bool,
+        default=False,
+        compcoef=0.909,
+        allow_ddl_set=True,
+    )
+
+
+class BlobalCommandContext(
+    sd.ObjectCommandContext[so.Object],
+    s_anno.AnnotationSubjectCommandContext
+):
+    pass
+
+
+class BlobalCommand(
+    sd.QualifiedObjectCommand[Blobal],
+    context_class=BlobalCommandContext,
+):
+    pass
+
+
+class CreateBlobal(
+    sd.CreateObject[Blobal],
+    BlobalCommand,
+):
+    astnode = qlast.CreateBlobal
+
+
+class RenameBlobal(
+    sd.RenameObject[Blobal],
+    BlobalCommand,
+):
+    pass
+
+
+class AlterBlobal(
+    sd.AlterObject[Blobal],
+    BlobalCommand,
+):
+    astnode = qlast.AlterBlobal
+
+
+class DeleteBlobal(
+    sd.DeleteObject[Blobal],
+    BlobalCommand,
+):
+    astnode = qlast.DropBlobal
diff --git a/edb/schema/operators.py b/edb/schema/operators.py
index 856225997..bc9a3aea7 100644
--- a/edb/schema/operators.py
+++ b/edb/schema/operators.py
@@ -68,12 +68,6 @@ class Operator(
     code = so.SchemaField(
         str, default=None, compcoef=0.4)
 
-    # An unused dummy field. We have this here to make it easier to
-    # test the *removal* of internal schema fields during in-place
-    # upgrades.
-    _dummy_field = so.SchemaField(
-        str, default=None)
-
     # If this is a derivative operator, *derivative_of* would
     # contain the name of the origin operator.
     # For example, the `std::IN` operator has `std::=`
diff --git a/edb/server/compiler/status.py b/edb/server/compiler/status.py
index 9c11af6e3..54321982e 100644
--- a/edb/server/compiler/status.py
+++ b/edb/server/compiler/status.py
@@ -68,6 +68,8 @@ def get_schema_class(ql: qlast.ObjectDDL) -> qltypes.SchemaObjectClass:
             return osc.ALIAS
         case qlast.GlobalCommand():
             return osc.GLOBAL
+        case qlast.BlobalCommand():
+            return osc.GLOBAL
         case qlast.LinkCommand():
             return osc.LINK
         case qlast.IndexCommand():
diff --git a/tests/test_edgeql_select.py b/tests/test_edgeql_select.py
index aa26da128..18da441d0 100644
--- a/tests/test_edgeql_select.py
+++ b/tests/test_edgeql_select.py
@@ -1964,6 +1964,18 @@ class TestEdgeQLSelect(tb.QueryTestCase):
             ]),
         )
 
+    async def test_edgeql_select_baseobject_function_01(self):
+        # HACK: special inplace-upgrade test
+        await self.con.execute('''
+            CREATE BLOBAL asdf { set required := true; };
+        ''')
+        await self.assert_query_result(
+            r'''
+            select all_objects()[is schema::Blobal] { name };
+            ''',
+            [{"name": "default::asdf"}],
+        )
+
     async def test_edgeql_select_id_01(self):
         # allow assigning id to a computed (#4781)
         await self.con.query('SELECT schema::Type { XYZ := .id};')
diff --git a/tests/test_link_target_delete.py b/tests/test_link_target_delete.py
index 8982b3113..f50b28c92 100644
--- a/tests/test_link_target_delete.py
+++ b/tests/test_link_target_delete.py
@@ -307,6 +307,48 @@ class TestLinkTargetDeleteDeclarative(stb.QueryTestCase):
                     DELETE (SELECT Target1 FILTER .name = 'Target1.1');
                 """)
 
+    async def test_link_on_target_delete_restrict_schema_01(self):
+        # HACK: special inplace-upgrade test
+        async with self._run_and_rollback():
+            await self.con.execute("""
+                CREATE BLOBAL asdf2 { set required := true; };
+
+                INSERT SchemaSource {
+                    name := 'Source1.1',
+                    schema_restrict := (
+                        SELECT schema::Blobal LIMIT 1
+                    )
+                };
+            """)
+
+            with self.assertRaisesRegex(
+                    edgedb.ConstraintViolationError,
+                    'prohibited by link'):
+                await self.con.execute("""
+                    DROP BLOBAL asdf2;
+                """)
+
+    async def test_link_on_target_delete_restrict_schema_02(self):
+        # HACK: special inplace-upgrade test
+        async with self._run_and_rollback():
+            await self.con.execute("""
+                CREATE BLOBAL asdf2 { set required := true; };
+
+                INSERT SchemaSource {
+                    name := 'Source1.1',
+                    schema_m_restrict := (
+                        SELECT schema::Blobal LIMIT 1
+                    )
+                };
+            """)
+
+            with self.assertRaisesRegex(
+                    edgedb.ConstraintViolationError,
+                    'prohibited by link'):
+                await self.con.execute("""
+                    DROP BLOBAL asdf2;
+                """)
+
     async def test_link_on_target_delete_deferred_restrict_01(self):
         exception_is_deferred = False
 
