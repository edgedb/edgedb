abstract link subordinates:
    property comment -> str

type Subordinate:
    required property name -> str

type InsertTest:
    property name -> str
    property l1 -> int
    required property l2 -> int
    property l3 -> str:
        default := "test"
    link subordinates -> Subordinate:
        cardinality := '1*'

type Annotation:
    required property name -> str
    property note -> str
    link subject -> Object

type DefaultTest1:
    property num -> int:
        default := 42
    property foo -> str

type DefaultTest2:
    property foo -> str
    required property num -> int:
        # XXX: circumventing sequence deficiency
        default :=
            SELECT DefaultTest1.num + 1
            ORDER BY DefaultTest1.num DESC
            LIMIT 1

type DefaultTest3:
    required property foo -> float:
        # non-deterministic dynamic value
        default := random()

type DefaultTest4:
    required property bar -> int:
        # deterministic dynamic value
        default := (SELECT count(DefaultTest4))

# types to test some inheritance issues
type InputValue:
    property val -> str

abstract type Callable:
    link args -> InputValue:
        cardinality := '1*'

type Field extending Callable:
    # This link 'args' appears to be overriding the inherited 'args'
    # from Callable.
    inherited link args -> InputValue:
        cardinality := '1*'

type Directive extending Callable
