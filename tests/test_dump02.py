#
# This source file is part of the EdgeDB open source project.
#
# Copyright 2020-present MagicStack Inc. and the EdgeDB authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


import os.path

from edb.testbase import server as tb


class DumpTestCaseMixin:

    async def ensure_schema_data_integrity(self):
        tx = self.con.transaction()
        await tx.start()
        try:
            await self._ensure_schema_data_integrity()
        finally:
            await tx.rollback()

    async def _ensure_schema_data_integrity(self):
        await self.assert_query_result(
            r'''
                SELECT A {
                    `s p A m ü§û`: {
                        `üöÄ`,
                        c100,
                        c101 := `üíØ`(`üôÄ` := .`üöÄ` + 1)
                    }
                }
            ''',
            [
                {
                    's p A m ü§û': {
                        'üöÄ': 42,
                        'c100': 58,
                        'c101': 57,
                    }
                }
            ]
        )

        await self.assert_query_result(
            r'''
                SELECT ≈Åukasz {
                    `≈Åü§û`,
                    `≈ÅüíØ`: {
                        @`üôÄüöÄüöÄüöÄüôÄ`,
                        @`üôÄŸÖÿ±ÿ≠ÿ®ÿßüôÄ`,
                        `s p A m ü§û`: {
                            `üöÄ`,
                            c100,
                            c101 := `üíØ`(`üôÄ` := .`üöÄ` + 1)
                        }
                    }
                } ORDER BY .`≈ÅüíØ` EMPTY LAST
            ''',
            [
                {
                    '≈Åü§û': 'simple üöÄ',
                    '≈ÅüíØ': {
                        '@üôÄüöÄüöÄüöÄüôÄ': None,
                        '@üôÄŸÖÿ±ÿ≠ÿ®ÿßüôÄ': None,
                        's p A m ü§û': {
                            'üöÄ': 42,
                            'c100': 58,
                            'c101': 57,
                        }
                    }
                },
                {
                    '≈Åü§û': '‰Ω†Â•Ωü§û',
                    '≈ÅüíØ': None,
                },
            ]
        )

        await self.assert_query_result(
            r'''
                SELECT `üíØüíØüíØ`::`üöÄüôÄüöÄ`('≈Åink prop üôÄŸÖÿ±ÿ≠ÿ®ÿßüôÄ');
            ''',
            [
                '≈Åink prop üôÄŸÖÿ±ÿ≠ÿ®ÿßüôÄ≈ÅüôÄ',
            ]
        )

        # Check that annotation exists
        await self.assert_query_result(
            r'''
                WITH MODULE schema
                SELECT Function {
                    name,
                    annotations: {
                        name,
                        @value
                    },
                } FILTER .name = 'default::üíØ';
            ''',
            [
                {
                    'name': 'default::üíØ',
                    'annotations': [{
                        'name': 'default::üçø',
                        '@value': 'fun!üöÄ',
                    }]
                }
            ]
        )

        # Check that index exists
        await self.assert_query_result(
            r'''
                WITH MODULE schema
                SELECT ObjectType {
                    name,
                    indexes: {
                        expr,
                    },
                    properties: {
                        name,
                        default,
                    } FILTER .name != 'id',
                } FILTER .name = 'default::≈Åukasz';
            ''',
            [
                {
                    'name': 'default::≈Åukasz',
                    'indexes': [{
                        'expr': '.`≈Åü§û`'
                    }],
                }
            ]
        )

        # Check that scalar types exist
        await self.assert_query_result(
            r'''
                WITH MODULE schema
                SELECT (
                    SELECT ScalarType {
                        name,
                    } FILTER .name LIKE 'default%'
                ).name;
            ''',
            {
                'default::‰Ω†Â•Ω',
                'default::ŸÖÿ±ÿ≠ÿ®ÿß',
                'default::üöÄüöÄüöÄ',
            }
        )

        # Check that abstract constraint exists
        await self.assert_query_result(
            r'''
                WITH MODULE schema
                SELECT Constraint {
                    name,
                } FILTER .name LIKE 'default%' AND .abstract;
            ''',
            [
                {'name': 'default::üöÄüçø'},
            ]
        )

        # Check that abstract constraint was applied properly
        await self.assert_query_result(
            r'''
                WITH MODULE schema
                SELECT Constraint {
                    name,
                    params: {
                        @value
                    } FILTER .num > 0
                }
                FILTER
                    .name = 'default::üöÄüçø' AND
                    NOT .abstract AND
                    Constraint.<constraints[IS ScalarType].name =
                        'default::üöÄüöÄüöÄ';
            ''',
            [
                {
                    'name': 'default::üöÄüçø',
                    'params': [
                        {'@value': '100'}
                    ]
                },
            ]
        )

        # Check the default value
        await self.con.execute(r'INSERT ≈Åukasz')
        await self.assert_query_result(
            r'''
                SELECT ≈Åukasz {
                    `≈Åü§û`,
                } FILTER NOT EXISTS .`≈ÅüíØ`;
            ''',
            [
                # We had one before and expect one more now.
                {'≈Åü§û': '‰Ω†Â•Ωü§û'},
                {'≈Åü§û': '‰Ω†Â•Ωü§û'},
            ]
        )

        await self.assert_query_result(
            r'''
                SELECT count(schema::Migration) >= 2
            ''',
            [True],
        )


class TestDump02(tb.StableDumpTestCase, DumpTestCaseMixin):

    SCHEMA_DEFAULT = os.path.join(os.path.dirname(__file__), 'schemas',
                                  'dump02_default.esdl')

    SETUP = os.path.join(os.path.dirname(__file__), 'schemas',
                         'dump02_setup.edgeql')

    @classmethod
    def get_setup_script(cls):
        script = (
            'CONFIGURE CURRENT DATABASE SET allow_dml_in_functions := true;\n'
        )
        return script + super().get_setup_script()

    async def test_dump02_dump_restore(self):
        await self.check_dump_restore(
            DumpTestCaseMixin.ensure_schema_data_integrity)


class TestDump02Compat(
    tb.DumpCompatTestCase,
    DumpTestCaseMixin,
    dump_subdir='dump02',
    check_method=DumpTestCaseMixin.ensure_schema_data_integrity,
):
    pass
